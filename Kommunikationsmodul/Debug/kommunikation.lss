
kommunikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001234  000012c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051e  00800108  00800108  000012d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ba  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  000028fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc2  00000000  00000000  000032ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000042b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000356  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	e3 c0       	rjmp	.+454    	; 0x218 <__vector_20>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	c0 c0       	rjmp	.+384    	; 0x1f2 <__vector_28>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e3       	ldi	r30, 0x34	; 52
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 32       	cpi	r26, 0x26	; 38
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <main>
      c6:	0c 94 18 09 	jmp	0x1230	; 0x1230 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <Init>:
void state1();
void baby_proof_and_update();

void Init()
{
	DDRD = 0b01100110; //D-port initiering 1 utg?ng 0 ing?ng 00100110
      cc:	86 e6       	ldi	r24, 0x66	; 102
      ce:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
      d0:	8f ef       	ldi	r24, 0xFF	; 255
      d2:	84 b9       	out	0x04, r24	; 4

	UART0_Init(); //styr och sensor
      d4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <UART0_Init>
	UART1_Init(); // bl?tand
      d8:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <UART1_Init>
	sei(); //enable interrupts
      dc:	78 94       	sei
      de:	08 95       	ret

000000e0 <update_direction>:
}

void update_direction(int dir_dir) //sett från robo start är 0 fram, 1 höger, 2 bakåt, 3 vänster. input: 0 efter höger_rot, 1 efter vänster_rot
{
	switch(dir_dir)
      e0:	00 97       	sbiw	r24, 0x00	; 0
      e2:	21 f0       	breq	.+8      	; 0xec <update_direction+0xc>
      e4:	81 30       	cpi	r24, 0x01	; 1
      e6:	91 05       	cpc	r25, r1
      e8:	b9 f0       	breq	.+46     	; 0x118 <update_direction+0x38>
      ea:	2c c0       	rjmp	.+88     	; 0x144 <update_direction+0x64>
	{
		case 0:
		direction = direction + 1;
      ec:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
      f0:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
      f4:	2f 5f       	subi	r18, 0xFF	; 255
      f6:	3f 4f       	sbci	r19, 0xFF	; 255
      f8:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
      fc:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		if(direction == 4)
     100:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     104:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     108:	24 30       	cpi	r18, 0x04	; 4
     10a:	31 05       	cpc	r19, r1
     10c:	d9 f4       	brne	.+54     	; 0x144 <update_direction+0x64>
		{
			direction = 0;
     10e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <direction+0x1>
     112:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <direction>
     116:	16 c0       	rjmp	.+44     	; 0x144 <update_direction+0x64>
		}
		break;
		case 1:
		direction = direction - 1;
     118:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     11c:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     120:	21 50       	subi	r18, 0x01	; 1
     122:	31 09       	sbc	r19, r1
     124:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
     128:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		if (direction < 0)
     12c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     130:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     134:	33 23       	and	r19, r19
     136:	34 f4       	brge	.+12     	; 0x144 <update_direction+0x64>
		{
			direction = 3;
     138:	23 e0       	ldi	r18, 0x03	; 3
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
     140:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		}
		break;
		
	}
	sensor_in[14] = direction;
     144:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     148:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     14c:	ed e0       	ldi	r30, 0x0D	; 13
     14e:	f6 e0       	ldi	r31, 0x06	; 6
     150:	26 87       	std	Z+14, r18	; 0x0e
	sensor_in[11] = dir_dir;
     152:	83 87       	std	Z+11, r24	; 0x0b
     154:	08 95       	ret

00000156 <send_matrix>:
}

void send_matrix()
{
     156:	bf 92       	push	r11
     158:	cf 92       	push	r12
     15a:	df 92       	push	r13
     15c:	ef 92       	push	r14
     15e:	ff 92       	push	r15
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	e1 2c       	mov	r14, r1
     16a:	f1 2c       	mov	r15, r1
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
		{
			if (matrix[y][x] == wall)
     16c:	0f 2e       	mov	r0, r31
     16e:	f2 e3       	ldi	r31, 0x32	; 50
     170:	bf 2e       	mov	r11, r31
     172:	f0 2d       	mov	r31, r0
     174:	26 c0       	rjmp	.+76     	; 0x1c2 <send_matrix+0x6c>
     176:	dc 2e       	mov	r13, r28
     178:	f8 01       	movw	r30, r16
     17a:	ec 0f       	add	r30, r28
     17c:	fd 1f       	adc	r31, r29
     17e:	90 81       	ld	r25, Z
     180:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     184:	98 13       	cpse	r25, r24
     186:	12 c0       	rjmp	.+36     	; 0x1ac <send_matrix+0x56>
			{
				laptop_in = 0;
     188:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
				UART1_Transmit(y);
     18c:	8c 2d       	mov	r24, r12
     18e:	0e 94 08 09 	call	0x1210	; 0x1210 <UART1_Transmit>
				while(laptop_in != 33);
     192:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     196:	81 32       	cpi	r24, 0x21	; 33
     198:	e1 f7       	brne	.-8      	; 0x192 <send_matrix+0x3c>
				
				laptop_in = 0;
     19a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
				UART1_Transmit(x);
     19e:	8d 2d       	mov	r24, r13
     1a0:	0e 94 08 09 	call	0x1210	; 0x1210 <UART1_Transmit>
				while(laptop_in != 33);
     1a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     1a8:	81 32       	cpi	r24, 0x21	; 33
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <send_matrix+0x4e>
     1ac:	21 96       	adiw	r28, 0x01	; 1

void send_matrix()
{
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
     1ae:	c2 33       	cpi	r28, 0x32	; 50
     1b0:	d1 05       	cpc	r29, r1
     1b2:	09 f7       	brne	.-62     	; 0x176 <send_matrix+0x20>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	e8 1a       	sub	r14, r24
     1b8:	f8 0a       	sbc	r15, r24
	sensor_in[11] = dir_dir;
}

void send_matrix()
{
	for (unsigned char y = 0; y < 25; ++y)
     1ba:	89 e1       	ldi	r24, 0x19	; 25
     1bc:	e8 16       	cp	r14, r24
     1be:	f1 04       	cpc	r15, r1
     1c0:	59 f0       	breq	.+22     	; 0x1d8 <send_matrix+0x82>
     1c2:	ce 2c       	mov	r12, r14
	sensor_in[14] = direction;
	sensor_in[11] = dir_dir;
}

void send_matrix()
{
     1c4:	c0 e0       	ldi	r28, 0x00	; 0
     1c6:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
		{
			if (matrix[y][x] == wall)
     1c8:	be 9c       	mul	r11, r14
     1ca:	80 01       	movw	r16, r0
     1cc:	bf 9c       	mul	r11, r15
     1ce:	10 0d       	add	r17, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	09 5d       	subi	r16, 0xD9	; 217
     1d4:	1e 4f       	sbci	r17, 0xFE	; 254
     1d6:	cf cf       	rjmp	.-98     	; 0x176 <send_matrix+0x20>
				UART1_Transmit(x);
				while(laptop_in != 33);
			}
		}
	}
	UART1_Transmit(0b11111111);
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	0e 94 08 09 	call	0x1210	; 0x1210 <UART1_Transmit>
}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	df 90       	pop	r13
     1ec:	cf 90       	pop	r12
     1ee:	bf 90       	pop	r11
     1f0:	08 95       	ret

000001f2 <__vector_28>:
	laptop_in = 0;
	recieve_renewed = 0;
}

ISR(USART1_RX_vect) // tAR EMOT FR?N LAPTOP
{
     1f2:	1f 92       	push	r1
     1f4:	0f 92       	push	r0
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	0f 92       	push	r0
     1fa:	11 24       	eor	r1, r1
     1fc:	8f 93       	push	r24
	laptop_in = UDR1;
     1fe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     202:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <laptop_in>
	recieve_renewed = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <recieve_renewed>
}
     20c:	8f 91       	pop	r24
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <__vector_20>:

ISR(USART0_RX_vect)	// tAR EMOT FR?N SENSOR
{
     218:	1f 92       	push	r1
     21a:	0f 92       	push	r0
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	0f 92       	push	r0
     220:	11 24       	eor	r1, r1
     222:	0b b6       	in	r0, 0x3b	; 59
     224:	0f 92       	push	r0
     226:	8f 93       	push	r24
     228:	9f 93       	push	r25
     22a:	ef 93       	push	r30
     22c:	ff 93       	push	r31
	New_sens = 0;
     22e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <New_sens>
	sensor_in[counter2] = UDR0;				// tar emot alla sensorv?rden efter vi har k?rt 40cm och l?gger in i sensorvectorn
     232:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <counter2>
     236:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <counter2+0x1>
     23a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     23e:	e3 5f       	subi	r30, 0xF3	; 243
     240:	f9 4f       	sbci	r31, 0xF9	; 249
     242:	80 83       	st	Z, r24
	counter2 = counter2 + 1;
     244:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <counter2>
     248:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <counter2+0x1>
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <counter2+0x1>
     252:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <counter2>
	if (counter2 == 10)
     256:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <counter2>
     25a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <counter2+0x1>
     25e:	0a 97       	sbiw	r24, 0x0a	; 10
     260:	39 f4       	brne	.+14     	; 0x270 <__vector_20+0x58>
	{
		counter2 = 0;
     262:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <counter2+0x1>
     266:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter2>
		New_sens = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <New_sens>
	}
	
}
     270:	ff 91       	pop	r31
     272:	ef 91       	pop	r30
     274:	9f 91       	pop	r25
     276:	8f 91       	pop	r24
     278:	0f 90       	pop	r0
     27a:	0b be       	out	0x3b, r0	; 59
     27c:	0f 90       	pop	r0
     27e:	0f be       	out	0x3f, r0	; 63
     280:	0f 90       	pop	r0
     282:	1f 90       	pop	r1
     284:	18 95       	reti

00000286 <get_low_high>:

void get_low_high()
{
	low = sens_safe[6];
     286:	ee e1       	ldi	r30, 0x1E	; 30
     288:	f6 e0       	ldi	r31, 0x06	; 6
     28a:	86 81       	ldd	r24, Z+6	; 0x06
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <low+0x1>
     292:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <low>
	high = sens_safe[7];
     296:	87 81       	ldd	r24, Z+7	; 0x07
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <high+0x1>
     29e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <high>
     2a2:	08 95       	ret

000002a4 <get_ny_fram>:
}

void get_ny_fram()
{
	get_low_high();
     2a4:	f0 df       	rcall	.-32     	; 0x286 <get_low_high>
	ny_fram = (low + (high*256)); // tar nytt fram värde som vi jämför med gamla
     2a6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <high>
     2aa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <high+0x1>
     2ae:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <low>
     2b2:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <low+0x1>
     2b6:	98 2f       	mov	r25, r24
     2b8:	88 27       	eor	r24, r24
     2ba:	82 0f       	add	r24, r18
     2bc:	93 1f       	adc	r25, r19
     2be:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <ny_fram+0x1>
     2c2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ny_fram>
     2c6:	08 95       	ret

000002c8 <go_forward>:
	start_dist = ny_fram;
}

void go_forward() // tar nytt fram värde samt skickar kör fram signal och resetar roteratsignalen
{	
	if (first == 1)
     2c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <first>
     2cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <first+0x1>
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	31 f4       	brne	.+12     	; 0x2e0 <go_forward+0x18>
	{
		UART0_Transmit(forward);
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	a4 d7       	rcall	.+3912   	; 0x1220 <UART0_Transmit>
		first = 0;
     2d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <first+0x1>
     2dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <first>
	}

	if ((sens_safe[0] < 20) && (sens_safe[1] < 20 ))
     2e0:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     2e4:	84 31       	cpi	r24, 0x14	; 20
     2e6:	60 f4       	brcc	.+24     	; 0x300 <go_forward+0x38>
     2e8:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     2ec:	84 31       	cpi	r24, 0x14	; 20
     2ee:	40 f4       	brcc	.+16     	; 0x300 <go_forward+0x38>
	{
		harRot = 0;
     2f0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
		first = 1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <first+0x1>
     2fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <first>
     300:	08 95       	ret

00000302 <baby_proof_and_update>:
	
}

void baby_proof_and_update() //safear sensorvärden, inte programkoder
{
	while(New_sens != 1); //Vänta på hel bytearray
     302:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <New_sens>
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	e1 f7       	brne	.-8      	; 0x302 <baby_proof_and_update>
	cli();
     30a:	f8 94       	cli
		for(int i=0; i<8;i++)
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
		{
			sens_safe[i] = sensor_in[i];
     310:	fc 01       	movw	r30, r24
     312:	e3 5f       	subi	r30, 0xF3	; 243
     314:	f9 4f       	sbci	r31, 0xF9	; 249
     316:	20 81       	ld	r18, Z
     318:	fc 01       	movw	r30, r24
     31a:	e2 5e       	subi	r30, 0xE2	; 226
     31c:	f9 4f       	sbci	r31, 0xF9	; 249
     31e:	20 83       	st	Z, r18

void baby_proof_and_update() //safear sensorvärden, inte programkoder
{
	while(New_sens != 1); //Vänta på hel bytearray
	cli();
		for(int i=0; i<8;i++)
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	88 30       	cpi	r24, 0x08	; 8
     324:	91 05       	cpc	r25, r1
     326:	a1 f7       	brne	.-24     	; 0x310 <baby_proof_and_update+0xe>
		{
			sens_safe[i] = sensor_in[i];
		}
	sei();
     328:	78 94       	sei
	get_ny_fram();
     32a:	bc cf       	rjmp	.-136    	; 0x2a4 <get_ny_fram>
     32c:	08 95       	ret

0000032e <send_to_laptop>:
	}
	UART1_Transmit(0b11111111);
}

void send_to_laptop() //inte kalla för tätt
{
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
	baby_proof_and_update();
     332:	e7 df       	rcall	.-50     	; 0x302 <baby_proof_and_update>
	sensor_in[10] = KokFarFarAway;
     334:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     338:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     33c:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <sensor_in+0xa>
	for(int i = 0; i < 8 ; ++i)
     340:	c0 e0       	ldi	r28, 0x00	; 0
     342:	d0 e0       	ldi	r29, 0x00	; 0
	{
		laptop_in = 0;
     344:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
		UART1_Transmit(sens_safe[i]);
     348:	fe 01       	movw	r30, r28
     34a:	e2 5e       	subi	r30, 0xE2	; 226
     34c:	f9 4f       	sbci	r31, 0xF9	; 249
     34e:	80 81       	ld	r24, Z
     350:	5f d7       	rcall	.+3774   	; 0x1210 <UART1_Transmit>
		while(laptop_in != 33);
     352:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     356:	81 32       	cpi	r24, 0x21	; 33
     358:	e1 f7       	brne	.-8      	; 0x352 <send_to_laptop+0x24>

void send_to_laptop() //inte kalla för tätt
{
	baby_proof_and_update();
	sensor_in[10] = KokFarFarAway;
	for(int i = 0; i < 8 ; ++i)
     35a:	21 96       	adiw	r28, 0x01	; 1
     35c:	c8 30       	cpi	r28, 0x08	; 8
     35e:	d1 05       	cpc	r29, r1
     360:	89 f7       	brne	.-30     	; 0x344 <send_to_laptop+0x16>
     362:	c8 e0       	ldi	r28, 0x08	; 8
     364:	d0 e0       	ldi	r29, 0x00	; 0
		UART1_Transmit(sens_safe[i]);
		while(laptop_in != 33);
	}
	for(int i = 8; i < 15; ++i)
	{
		laptop_in = 0;
     366:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
		UART1_Transmit(sensor_in[i]);
     36a:	fe 01       	movw	r30, r28
     36c:	e3 5f       	subi	r30, 0xF3	; 243
     36e:	f9 4f       	sbci	r31, 0xF9	; 249
     370:	80 81       	ld	r24, Z
     372:	4e d7       	rcall	.+3740   	; 0x1210 <UART1_Transmit>
		while(laptop_in != 33);
     374:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     378:	81 32       	cpi	r24, 0x21	; 33
     37a:	e1 f7       	brne	.-8      	; 0x374 <send_to_laptop+0x46>
	{
		laptop_in = 0;
		UART1_Transmit(sens_safe[i]);
		while(laptop_in != 33);
	}
	for(int i = 8; i < 15; ++i)
     37c:	21 96       	adiw	r28, 0x01	; 1
     37e:	cf 30       	cpi	r28, 0x0F	; 15
     380:	d1 05       	cpc	r29, r1
     382:	89 f7       	brne	.-30     	; 0x366 <send_to_laptop+0x38>
	{
		laptop_in = 0;
		UART1_Transmit(sensor_in[i]);
		while(laptop_in != 33);
	}
	laptop_in = 0;
     384:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
	recieve_renewed = 0;
     388:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <recieve_renewed>
}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <handle_incoming_data>:
	kolla_efter_kok_left();
	
}
void handle_incoming_data()
{
	switch(laptop_in)
     392:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     396:	80 31       	cpi	r24, 0x10	; 16
     398:	a1 f0       	breq	.+40     	; 0x3c2 <handle_incoming_data+0x30>
     39a:	80 33       	cpi	r24, 0x30	; 48
     39c:	d1 f0       	breq	.+52     	; 0x3d2 <handle_incoming_data+0x40>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	f1 f4       	brne	.+60     	; 0x3de <handle_incoming_data+0x4c>
	{
		case forward:
			AUTO = 1;
     3a2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <AUTO>
			MANUELL = 0;
     3a6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MANUELL>
			baby_proof_and_update();
     3aa:	ab df       	rcall	.-170    	; 0x302 <baby_proof_and_update>
			start_dist = ny_fram;
     3ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     3b0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     3b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     3b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
			UART0_Transmit(forward);
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	30 d7       	rcall	.+3680   	; 0x1220 <UART0_Transmit>
			
		break;
     3c0:	0e c0       	rjmp	.+28     	; 0x3de <handle_incoming_data+0x4c>
		
		case man:
			AUTO = 0;
     3c2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
			MANUELL = 1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			UART0_Transmit(stop);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	28 d7       	rcall	.+3664   	; 0x1220 <UART0_Transmit>
		break;
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <handle_incoming_data+0x4c>
		
		case 0b00110000:
			AUTO = 0;
     3d2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
			MANUELL = 1;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			send_matrix();
     3dc:	bc de       	rcall	.-648    	; 0x156 <send_matrix>
		break;	
		
		default:
		break;		
	}
	recieve_renewed = 0;
     3de:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <recieve_renewed>
     3e2:	08 95       	ret

000003e4 <state1>:
	}
}

void state1()
{
		switch (direction)
     3e4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     3e8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	91 05       	cpc	r25, r1
     3f0:	b9 f1       	breq	.+110    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     3f2:	1c f4       	brge	.+6      	; 0x3fa <state1+0x16>
     3f4:	89 2b       	or	r24, r25
     3f6:	49 f0       	breq	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3f8:	08 95       	ret
     3fa:	82 30       	cpi	r24, 0x02	; 2
     3fc:	91 05       	cpc	r25, r1
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	62 c0       	rjmp	.+196    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     402:	03 97       	sbiw	r24, 0x03	; 3
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	8a c0       	rjmp	.+276    	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     408:	08 95       	ret
		{
			case 0: //norr
			bot_y = (bot_y + 1); // uppdaterar robotens position
     40a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
			
			if (matrix[bot_y][(bot_x + 1)] == unknown) // kollar åt höger
     414:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     418:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	22 e3       	ldi	r18, 0x32	; 50
     420:	82 9f       	mul	r24, r18
     422:	e0 0d       	add	r30, r0
     424:	f1 1d       	adc	r31, r1
     426:	11 24       	eor	r1, r1
     428:	e8 5d       	subi	r30, 0xD8	; 216
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	90 81       	ld	r25, Z
     42e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     432:	98 13       	cpse	r25, r24
     434:	a4 c0       	rjmp	.+328    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     436:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     43a:	88 32       	cpi	r24, 0x28	; 40
     43c:	08 f0       	brcs	.+2      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43e:	9f c0       	rjmp	.+318    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				{
					matrix[bot_y][(bot_x + 1)] = wall;
     440:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     444:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     44e:	22 e3       	ldi	r18, 0x32	; 50
     450:	92 9f       	mul	r25, r18
     452:	e0 0d       	add	r30, r0
     454:	f1 1d       	adc	r31, r1
     456:	11 24       	eor	r1, r1
     458:	e8 5d       	subi	r30, 0xD8	; 216
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	80 83       	st	Z, r24
     45e:	08 95       	ret
				}
			}		
			break;
			
			case 1: //ÖST
			bot_x = (bot_x + 1);
     460:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			if (matrix[bot_y - 1][bot_x] == unknown) // kollar åt höger
     46a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     476:	32 e3       	ldi	r19, 0x32	; 50
     478:	38 9f       	mul	r19, r24
     47a:	f0 01       	movw	r30, r0
     47c:	39 9f       	mul	r19, r25
     47e:	f0 0d       	add	r31, r0
     480:	11 24       	eor	r1, r1
     482:	e9 5d       	subi	r30, 0xD9	; 217
     484:	fe 4f       	sbci	r31, 0xFE	; 254
     486:	e2 0f       	add	r30, r18
     488:	f1 1d       	adc	r31, r1
     48a:	90 81       	ld	r25, Z
     48c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     490:	98 13       	cpse	r25, r24
     492:	75 c0       	rjmp	.+234    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     494:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     498:	88 32       	cpi	r24, 0x28	; 40
     49a:	08 f0       	brcs	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49c:	70 c0       	rjmp	.+224    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				{
					matrix[bot_y - 1][bot_x] = wall;
     49e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     4aa:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     4ae:	42 e3       	ldi	r20, 0x32	; 50
     4b0:	48 9f       	mul	r20, r24
     4b2:	f0 01       	movw	r30, r0
     4b4:	49 9f       	mul	r20, r25
     4b6:	f0 0d       	add	r31, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	e9 5d       	subi	r30, 0xD9	; 217
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	e3 0f       	add	r30, r19
     4c0:	f1 1d       	adc	r31, r1
     4c2:	20 83       	st	Z, r18
     4c4:	08 95       	ret
				}
			}		
			break;
			
			case 2:
			bot_y = (bot_y - 1);
     4c6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     4ca:	81 50       	subi	r24, 0x01	; 1
     4cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
			if (matrix[bot_y][bot_x - 1] == unknown) // kollar åt höger
     4d0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     4d4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	92 e3       	ldi	r25, 0x32	; 50
     4dc:	89 9f       	mul	r24, r25
     4de:	e0 0d       	add	r30, r0
     4e0:	f1 1d       	adc	r31, r1
     4e2:	11 24       	eor	r1, r1
     4e4:	ea 5d       	subi	r30, 0xDA	; 218
     4e6:	fe 4f       	sbci	r31, 0xFE	; 254
     4e8:	90 81       	ld	r25, Z
     4ea:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     4ee:	98 13       	cpse	r25, r24
     4f0:	46 c0       	rjmp	.+140    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     4f2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     4f6:	88 32       	cpi	r24, 0x28	; 40
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	41 c0       	rjmp	.+130    	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				{
					matrix[bot_y][bot_x - 1] = wall;
     4fc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     500:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     50a:	22 e3       	ldi	r18, 0x32	; 50
     50c:	92 9f       	mul	r25, r18
     50e:	e0 0d       	add	r30, r0
     510:	f1 1d       	adc	r31, r1
     512:	11 24       	eor	r1, r1
     514:	ea 5d       	subi	r30, 0xDA	; 218
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	80 83       	st	Z, r24
     51a:	08 95       	ret
				}
			}			
			break;
			
			case 3:
			bot_x = (bot_x - 1);
     51c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     520:	81 50       	subi	r24, 0x01	; 1
     522:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			if (matrix[bot_y + 1][bot_x] == unknown) // kollar åt höger
     526:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     532:	32 e3       	ldi	r19, 0x32	; 50
     534:	38 9f       	mul	r19, r24
     536:	f0 01       	movw	r30, r0
     538:	39 9f       	mul	r19, r25
     53a:	f0 0d       	add	r31, r0
     53c:	11 24       	eor	r1, r1
     53e:	e9 5d       	subi	r30, 0xD9	; 217
     540:	fe 4f       	sbci	r31, 0xFE	; 254
     542:	e2 0f       	add	r30, r18
     544:	f1 1d       	adc	r31, r1
     546:	90 81       	ld	r25, Z
     548:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     54c:	98 13       	cpse	r25, r24
     54e:	17 c0       	rjmp	.+46     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     550:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     554:	88 32       	cpi	r24, 0x28	; 40
     556:	98 f4       	brcc	.+38     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
				{
					matrix[bot_y + 1][bot_x] = wall;
     558:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     564:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     568:	42 e3       	ldi	r20, 0x32	; 50
     56a:	48 9f       	mul	r20, r24
     56c:	f0 01       	movw	r30, r0
     56e:	49 9f       	mul	r20, r25
     570:	f0 0d       	add	r31, r0
     572:	11 24       	eor	r1, r1
     574:	e9 5d       	subi	r30, 0xD9	; 217
     576:	fe 4f       	sbci	r31, 0xFE	; 254
     578:	e3 0f       	add	r30, r19
     57a:	f1 1d       	adc	r31, r1
     57c:	20 83       	st	Z, r18
     57e:	08 95       	ret

00000580 <update_position>:
}

void update_position() // gör switch case senare
{
	
	stop_dist = 15;
     580:	8f e0       	ldi	r24, 0x0F	; 15
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     588:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	get_ny_fram();
     58c:	8b de       	rcall	.-746    	; 0x2a4 <get_ny_fram>
	state1();
     58e:	2a df       	rcall	.-428    	; 0x3e4 <state1>
     590:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <bot_y>
	matrix[bot_y][bot_x] = drive;
     594:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <bot_x>
     598:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     59c:	22 e3       	ldi	r18, 0x32	; 50
     59e:	e2 9f       	mul	r30, r18
     5a0:	f0 01       	movw	r30, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	e9 5d       	subi	r30, 0xD9	; 217
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	e9 0f       	add	r30, r25
     5aa:	f1 1d       	adc	r31, r1
     5ac:	80 83       	st	Z, r24
     5ae:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
	sensor_in[12] = (unsigned char)bot_y;
     5b2:	ed e0       	ldi	r30, 0x0D	; 13
     5b4:	f6 e0       	ldi	r31, 0x06	; 6
     5b6:	84 87       	std	Z+12, r24	; 0x0c
     5b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
	sensor_in[13] = (unsigned char)bot_x;
     5bc:	85 87       	std	Z+13, r24	; 0x0d
     5be:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
	
if (state == 0)
     5c2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     5c6:	89 2b       	or	r24, r25
     5c8:	31 f4       	brne	.+12     	; 0x5d6 <update_position+0x56>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
{
	state = 1;
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     5d2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     5d6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
}
	if ((state == 1) && (KorKok == 1) && (bot_x == kokStart_x) && (kokStart_y == bot_y)){
     5da:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	d1 f4       	brne	.+52     	; 0x616 <update_position+0x96>
     5e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <KorKok>
     5e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <KorKok+0x1>
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	a1 f4       	brne	.+40     	; 0x616 <update_position+0x96>
     5ee:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <bot_x>
     5f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kokStart_x>
     5f6:	98 13       	cpse	r25, r24
     5f8:	0e c0       	rjmp	.+28     	; 0x616 <update_position+0x96>
     5fa:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <kokStart_y>
     5fe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     602:	98 13       	cpse	r25, r24
     604:	08 c0       	rjmp	.+16     	; 0x616 <update_position+0x96>
     606:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <KorKok+0x1>
		KorKok = 0;
     60a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <KorKok>
		go_home();
     60e:	a9 d1       	rcall	.+850    	; 0x962 <go_home>
		UART0_Transmit(stop);
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	06 c6       	rjmp	.+3084   	; 0x1220 <UART0_Transmit>
     614:	08 95       	ret
     616:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
// 		MANUELL = 1;
// 		AUTO = 0;
	}
	else if ((state == 1) && (bot_y == 0) && (bot_x == 25))
     61a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	09 f5       	brne	.+66     	; 0x664 <update_position+0xe4>
     622:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     626:	81 11       	cpse	r24, r1
     628:	1d c0       	rjmp	.+58     	; 0x664 <update_position+0xe4>
     62a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     62e:	89 31       	cpi	r24, 0x19	; 25
     630:	c9 f4       	brne	.+50     	; 0x664 <update_position+0xe4>
     632:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <KokKlart>
	{
		if (KokKlart == 1)
     636:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <KokKlart+0x1>
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	69 f4       	brne	.+26     	; 0x658 <update_position+0xd8>
     63e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
		{
			driven = 0;
     642:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
			rot_left();
     646:	44 d0       	rcall	.+136    	; 0x6d0 <rot_left>
     648:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
 			AUTO = 0;
 			MANUELL = 1;
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			UART0_Transmit(stop);
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	e5 c5       	rjmp	.+3018   	; 0x1220 <UART0_Transmit>
     656:	08 95       	ret
     658:	82 e0       	ldi	r24, 0x02	; 2
		}
		else
			state = 2;
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     660:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     664:	08 95       	ret

00000666 <rot_right>:
     666:	80 e0       	ldi	r24, 0x00	; 0
	ny_fram = (low + (high*256)); // tar nytt fram värde som vi jämför med gamla
}

void rot_right() // rotera höger och väntar till den är klar
{	
	UART0_Transmit(stop);
     668:	db d5       	rcall	.+2998   	; 0x1220 <UART0_Transmit>
		if (driven >= 13)
     66a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     66e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     672:	0d 97       	sbiw	r24, 0x0d	; 13
		{
			update_position();
     674:	28 f0       	brcs	.+10     	; 0x680 <rot_right+0x1a>
     676:	84 df       	rcall	.-248    	; 0x580 <update_position>
			driven = 0;
     678:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     67c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
		}
	harRot = 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <harRot>
	UART0_Transmit(rotate_right);
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	cb d5       	rcall	.+2966   	; 0x1220 <UART0_Transmit>
	sensor_in[8] = 'O';
     68a:	ed e0       	ldi	r30, 0x0D	; 13
     68c:	f6 e0       	ldi	r31, 0x06	; 6
     68e:	8f e4       	ldi	r24, 0x4F	; 79
     690:	80 87       	std	Z+8, r24	; 0x08
	sensor_in[10] = 'R'; //com kod
     692:	82 e5       	ldi	r24, 0x52	; 82
     694:	82 87       	std	Z+10, r24	; 0x0a
	while (sensor_in[8] != klar);
     696:	80 85       	ldd	r24, Z+8	; 0x08
     698:	84 34       	cpi	r24, 0x44	; 68
	
	UART0_Transmit(stop);
     69a:	e9 f7       	brne	.-6      	; 0x696 <rot_right+0x30>
     69c:	80 e0       	ldi	r24, 0x00	; 0
	update_direction(0);
     69e:	c0 d5       	rcall	.+2944   	; 0x1220 <UART0_Transmit>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	1d dd       	rcall	.-1478   	; 0xe0 <update_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	98 e0       	ldi	r25, 0x08	; 8
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	80 40       	sbci	r24, 0x00	; 0
     6b0:	90 40       	sbci	r25, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <rot_right+0x46>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <rot_right+0x50>
	_delay_ms(200); //låt den stanna och få in nya lidarvärdet framåt
	
	send_to_laptop(); //uppdaterar ny fram också
     6b6:	00 00       	nop
     6b8:	3a de       	rcall	.-908    	; 0x32e <send_to_laptop>
	start_dist = ny_fram;
     6ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     6be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     6c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     6c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
	UART0_Transmit(forward);	
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	a9 c5       	rjmp	.+2898   	; 0x1220 <UART0_Transmit>
     6ce:	08 95       	ret

000006d0 <rot_left>:
}

void rot_left() // rotera vänster och väntar till den är klar
{
	UART0_Transmit(stop);
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	a6 d5       	rcall	.+2892   	; 0x1220 <UART0_Transmit>
		if (driven >= 13)
     6d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     6d8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     6dc:	0d 97       	sbiw	r24, 0x0d	; 13
		{
			update_position();
     6de:	28 f0       	brcs	.+10     	; 0x6ea <rot_left+0x1a>
     6e0:	4f df       	rcall	.-354    	; 0x580 <update_position>
			driven = 0;
     6e2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     6e6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
		}
	harRot = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <harRot>
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	9f e8       	ldi	r25, 0x8F	; 143
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <rot_left+0x24>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <rot_left+0x2a>
	_delay_ms(10);
	UART0_Transmit(rotate_left);
     6fa:	00 00       	nop
     6fc:	84 e0       	ldi	r24, 0x04	; 4
     6fe:	90 d5       	rcall	.+2848   	; 0x1220 <UART0_Transmit>

	sensor_in[8] = 'O';
     700:	ed e0       	ldi	r30, 0x0D	; 13
     702:	f6 e0       	ldi	r31, 0x06	; 6
     704:	8f e4       	ldi	r24, 0x4F	; 79
     706:	80 87       	std	Z+8, r24	; 0x08
	sensor_in[10] = 'L'; //com kod
     708:	8c e4       	ldi	r24, 0x4C	; 76
     70a:	82 87       	std	Z+10, r24	; 0x0a
	while (sensor_in[8] != klar);
     70c:	80 85       	ldd	r24, Z+8	; 0x08
     70e:	84 34       	cpi	r24, 0x44	; 68

	UART0_Transmit(stop);
     710:	e9 f7       	brne	.-6      	; 0x70c <rot_left+0x3c>
     712:	80 e0       	ldi	r24, 0x00	; 0
	update_direction(1);
     714:	85 d5       	rcall	.+2826   	; 0x1220 <UART0_Transmit>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	e2 dc       	rcall	.-1596   	; 0xe0 <update_direction>
     71c:	9f ef       	ldi	r25, 0xFF	; 255
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	91 50       	subi	r25, 0x01	; 1
     724:	20 40       	sbci	r18, 0x00	; 0
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	e1 f7       	brne	.-8      	; 0x722 <rot_left+0x52>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <rot_left+0x5c>
     72c:	00 00       	nop
	_delay_ms(200); //låt lidarn mäta när rotten stannat
	
	switch(direction)
     72e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     732:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	91 05       	cpc	r25, r1
     73a:	99 f1       	breq	.+102    	; 0x7a2 <rot_left+0xd2>
     73c:	1c f4       	brge	.+6      	; 0x744 <rot_left+0x74>
     73e:	89 2b       	or	r24, r25
     740:	49 f0       	breq	.+18     	; 0x754 <rot_left+0x84>
     742:	b0 c0       	rjmp	.+352    	; 0x8a4 <rot_left+0x1d4>
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	91 05       	cpc	r25, r1
     748:	09 f4       	brne	.+2      	; 0x74c <rot_left+0x7c>
     74a:	5a c0       	rjmp	.+180    	; 0x800 <rot_left+0x130>
     74c:	03 97       	sbiw	r24, 0x03	; 3
     74e:	09 f4       	brne	.+2      	; 0x752 <rot_left+0x82>
     750:	7d c0       	rjmp	.+250    	; 0x84c <rot_left+0x17c>
     752:	a8 c0       	rjmp	.+336    	; 0x8a4 <rot_left+0x1d4>
	{
	case 0:
	if ((sens_safe[4] < 40) && matrix[bot_y][bot_x + 1] != drive )
     754:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     758:	88 32       	cpi	r24, 0x28	; 40
     75a:	08 f0       	brcs	.+2      	; 0x75e <rot_left+0x8e>
     75c:	a3 c0       	rjmp	.+326    	; 0x8a4 <rot_left+0x1d4>
     75e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     762:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	92 e3       	ldi	r25, 0x32	; 50
     76a:	89 9f       	mul	r24, r25
     76c:	e0 0d       	add	r30, r0
     76e:	f1 1d       	adc	r31, r1
     770:	11 24       	eor	r1, r1
     772:	e8 5d       	subi	r30, 0xD8	; 216
     774:	fe 4f       	sbci	r31, 0xFE	; 254
     776:	90 81       	ld	r25, Z
     778:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     77c:	98 17       	cp	r25, r24
     77e:	09 f4       	brne	.+2      	; 0x782 <rot_left+0xb2>
     780:	91 c0       	rjmp	.+290    	; 0x8a4 <rot_left+0x1d4>
		matrix[bot_y][bot_x + 1] = wall;
     782:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     786:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     790:	22 e3       	ldi	r18, 0x32	; 50
     792:	92 9f       	mul	r25, r18
     794:	e0 0d       	add	r30, r0
     796:	f1 1d       	adc	r31, r1
     798:	11 24       	eor	r1, r1
     79a:	e8 5d       	subi	r30, 0xD8	; 216
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	80 83       	st	Z, r24
     7a0:	81 c0       	rjmp	.+258    	; 0x8a4 <rot_left+0x1d4>
	break;
	case 1:
	if ((sens_safe[4] < 40) && matrix[bot_y - 1][bot_x] != drive)
     7a2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     7a6:	88 32       	cpi	r24, 0x28	; 40
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <rot_left+0xdc>
     7aa:	7c c0       	rjmp	.+248    	; 0x8a4 <rot_left+0x1d4>
     7ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     7b8:	32 e3       	ldi	r19, 0x32	; 50
     7ba:	38 9f       	mul	r19, r24
     7bc:	f0 01       	movw	r30, r0
     7be:	39 9f       	mul	r19, r25
     7c0:	f0 0d       	add	r31, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	e9 5d       	subi	r30, 0xD9	; 217
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	e2 0f       	add	r30, r18
     7ca:	f1 1d       	adc	r31, r1
     7cc:	90 81       	ld	r25, Z
     7ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     7d2:	98 17       	cp	r25, r24
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <rot_left+0x108>
     7d6:	66 c0       	rjmp	.+204    	; 0x8a4 <rot_left+0x1d4>
		matrix[bot_y - 1][bot_x] = wall;
     7d8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     7e4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     7e8:	42 e3       	ldi	r20, 0x32	; 50
     7ea:	48 9f       	mul	r20, r24
     7ec:	f0 01       	movw	r30, r0
     7ee:	49 9f       	mul	r20, r25
     7f0:	f0 0d       	add	r31, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	e9 5d       	subi	r30, 0xD9	; 217
     7f6:	fe 4f       	sbci	r31, 0xFE	; 254
     7f8:	e3 0f       	add	r30, r19
     7fa:	f1 1d       	adc	r31, r1
     7fc:	20 83       	st	Z, r18
     7fe:	52 c0       	rjmp	.+164    	; 0x8a4 <rot_left+0x1d4>
	break;
	case 2:
	if ((sens_safe[4] < 40) && matrix[bot_y][bot_x - 1] != drive)
     800:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     804:	88 32       	cpi	r24, 0x28	; 40
     806:	08 f0       	brcs	.+2      	; 0x80a <rot_left+0x13a>
     808:	4d c0       	rjmp	.+154    	; 0x8a4 <rot_left+0x1d4>
     80a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     80e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	92 e3       	ldi	r25, 0x32	; 50
     816:	89 9f       	mul	r24, r25
     818:	e0 0d       	add	r30, r0
     81a:	f1 1d       	adc	r31, r1
     81c:	11 24       	eor	r1, r1
     81e:	ea 5d       	subi	r30, 0xDA	; 218
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	90 81       	ld	r25, Z
     824:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     828:	98 17       	cp	r25, r24
     82a:	e1 f1       	breq	.+120    	; 0x8a4 <rot_left+0x1d4>
		matrix[bot_y][bot_x - 1] = wall;
     82c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     830:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     83a:	22 e3       	ldi	r18, 0x32	; 50
     83c:	92 9f       	mul	r25, r18
     83e:	e0 0d       	add	r30, r0
     840:	f1 1d       	adc	r31, r1
     842:	11 24       	eor	r1, r1
     844:	ea 5d       	subi	r30, 0xDA	; 218
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	80 83       	st	Z, r24
     84a:	2c c0       	rjmp	.+88     	; 0x8a4 <rot_left+0x1d4>
	break;
	case 3:
	if ((sens_safe[4] < 40) && matrix[bot_y + 1][bot_x] != drive)
     84c:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     850:	88 32       	cpi	r24, 0x28	; 40
     852:	40 f5       	brcc	.+80     	; 0x8a4 <rot_left+0x1d4>
     854:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     860:	32 e3       	ldi	r19, 0x32	; 50
     862:	38 9f       	mul	r19, r24
     864:	f0 01       	movw	r30, r0
     866:	39 9f       	mul	r19, r25
     868:	f0 0d       	add	r31, r0
     86a:	11 24       	eor	r1, r1
     86c:	e9 5d       	subi	r30, 0xD9	; 217
     86e:	fe 4f       	sbci	r31, 0xFE	; 254
     870:	e2 0f       	add	r30, r18
     872:	f1 1d       	adc	r31, r1
     874:	90 81       	ld	r25, Z
     876:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     87a:	98 17       	cp	r25, r24
     87c:	99 f0       	breq	.+38     	; 0x8a4 <rot_left+0x1d4>
		matrix[bot_y + 1][bot_x] = wall;
     87e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     88a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     88e:	42 e3       	ldi	r20, 0x32	; 50
     890:	48 9f       	mul	r20, r24
     892:	f0 01       	movw	r30, r0
     894:	49 9f       	mul	r20, r25
     896:	f0 0d       	add	r31, r0
     898:	11 24       	eor	r1, r1
     89a:	e9 5d       	subi	r30, 0xD9	; 217
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	e3 0f       	add	r30, r19
     8a0:	f1 1d       	adc	r31, r1
	break;
	}
	
	send_to_laptop();
     8a2:	20 83       	st	Z, r18
     8a4:	44 dd       	rcall	.-1400   	; 0x32e <send_to_laptop>
	start_dist = ny_fram;
     8a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     8aa:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     8ae:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     8b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
     8b6:	08 95       	ret

000008b8 <kokHittad>:
	}
	recieve_renewed = 0;
}

void kokHittad(){
	UART0_Transmit(forward); //kör fram till ö
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	b2 d4       	rcall	.+2404   	; 0x1220 <UART0_Transmit>
	do
	{
		baby_proof_and_update();
     8bc:	22 dd       	rcall	.-1468   	; 0x302 <baby_proof_and_update>
     8be:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
	}while(ny_fram > 12);
     8c2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     8c6:	0d 97       	sbiw	r24, 0x0d	; 13
     8c8:	c8 f7       	brcc	.-14     	; 0x8bc <kokHittad+0x4>
	
	UART0_Transmit(stop);
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	a9 d4       	rcall	.+2386   	; 0x1220 <UART0_Transmit>
     8ce:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
	harRot = 0;
     8d2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
	driven = 0;
     8d6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     8da:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
	
	if (KokFarFarAway == 1)
     8de:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	41 f5       	brne	.+80     	; 0x936 <kokHittad+0x7e>
     8e6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
	{
		switch (direction)
     8ea:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	91 05       	cpc	r25, r1
     8f2:	81 f0       	breq	.+32     	; 0x914 <kokHittad+0x5c>
     8f4:	1c f4       	brge	.+6      	; 0x8fc <kokHittad+0x44>
     8f6:	89 2b       	or	r24, r25
     8f8:	39 f0       	breq	.+14     	; 0x908 <kokHittad+0x50>
     8fa:	1d c0       	rjmp	.+58     	; 0x936 <kokHittad+0x7e>
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	91 05       	cpc	r25, r1
     900:	79 f0       	breq	.+30     	; 0x920 <kokHittad+0x68>
     902:	03 97       	sbiw	r24, 0x03	; 3
     904:	99 f0       	breq	.+38     	; 0x92c <kokHittad+0x74>
     906:	17 c0       	rjmp	.+46     	; 0x936 <kokHittad+0x7e>
     908:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
		{
			case 0:
				bot_y = bot_y + 1;
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
     912:	11 c0       	rjmp	.+34     	; 0x936 <kokHittad+0x7e>
			break;
     914:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
			case 1:
				bot_x = bot_x + 1;
     918:	8f 5f       	subi	r24, 0xFF	; 255
     91a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
     91e:	0b c0       	rjmp	.+22     	; 0x936 <kokHittad+0x7e>
			break;
     920:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			case 2:
				bot_y = bot_y - 1;
     924:	81 50       	subi	r24, 0x01	; 1
     926:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
     92a:	05 c0       	rjmp	.+10     	; 0x936 <kokHittad+0x7e>
			break;
     92c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
			case 3:
				bot_x = bot_x - 1;
     930:	81 50       	subi	r24, 0x01	; 1
     932:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			break;
		}
	 //rotera vänster
	}
	rot_left();
     936:	cc de       	rcall	.-616    	; 0x6d0 <rot_left>
     938:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
	kokStart_x = bot_x;
     93c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kokStart_x>
     940:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
	kokStart_y = bot_y;
     944:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <kokStart_y>
	UART0_Transmit(stop);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	6a d4       	rcall	.+2260   	; 0x1220 <UART0_Transmit>
     94c:	81 e0       	ldi	r24, 0x01	; 1
	state = 1;
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     954:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     958:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <KorKok+0x1>
	KorKok = 1;
     95c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <KorKok>
     960:	08 95       	ret

00000962 <go_home>:
     962:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
	//kör runt som vanligt till position
}

void go_home()
{
	driven = 0;
     966:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	rot_left();
     96a:	b2 de       	rcall	.-668    	; 0x6d0 <rot_left>
	UART0_Transmit(forward); //kör fram till ö
     96c:	81 e0       	ldi	r24, 0x01	; 1
	do
	{
		baby_proof_and_update();
     96e:	58 d4       	rcall	.+2224   	; 0x1220 <UART0_Transmit>
     970:	c8 dc       	rcall	.-1648   	; 0x302 <baby_proof_and_update>
	}while(ny_fram > 11);
     972:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     976:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     97a:	0c 97       	sbiw	r24, 0x0c	; 12
	
	UART0_Transmit(stop);
     97c:	c8 f7       	brcc	.-14     	; 0x970 <go_home+0xe>
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	4f d4       	rcall	.+2206   	; 0x1220 <UART0_Transmit>
	harRot = 0;
     982:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
	driven = 0;
     986:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     98a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	if (KokFarFarAway == 1)
     98e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     992:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	59 f5       	brne	.+86     	; 0x9f0 <go_home+0x8e>
	{
		sensor_in[15] = 10;
     99a:	8a e0       	ldi	r24, 0x0A	; 10
     99c:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <control_signal>
		switch (direction)
     9a0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     9a4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	91 05       	cpc	r25, r1
     9ac:	81 f0       	breq	.+32     	; 0x9ce <go_home+0x6c>
     9ae:	1c f4       	brge	.+6      	; 0x9b6 <go_home+0x54>
     9b0:	89 2b       	or	r24, r25
     9b2:	39 f0       	breq	.+14     	; 0x9c2 <go_home+0x60>
     9b4:	1d c0       	rjmp	.+58     	; 0x9f0 <go_home+0x8e>
     9b6:	82 30       	cpi	r24, 0x02	; 2
     9b8:	91 05       	cpc	r25, r1
     9ba:	79 f0       	breq	.+30     	; 0x9da <go_home+0x78>
     9bc:	03 97       	sbiw	r24, 0x03	; 3
     9be:	99 f0       	breq	.+38     	; 0x9e6 <go_home+0x84>
     9c0:	17 c0       	rjmp	.+46     	; 0x9f0 <go_home+0x8e>
			{
				// om kört 80 cm,
				case 0:
				bot_y = (bot_y + 1);
     9c2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
				break;
     9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <go_home+0x8e>
				case 1:
				bot_x = (bot_x + 1);
     9ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     9d2:	8f 5f       	subi	r24, 0xFF	; 255
     9d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
				break;
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <go_home+0x8e>
				case 2:
				bot_y = (bot_y - 1);
     9da:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
				break;
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <go_home+0x8e>
				case 3:
				bot_x = (bot_x - 1);
     9e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
				break;
			}
	 //rotera vänster
	}
	rot_left();
     9f0:	6f de       	rcall	.-802    	; 0x6d0 <rot_left>
	state = 1;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     9fa:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
	KokKlart = 1;
     9fe:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <KokKlart+0x1>
     a02:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <KokKlart>
     a06:	08 95       	ret

00000a08 <kolla_efter_kok_left>:
}

void kolla_efter_kok_left()
{

	baby_proof_and_update();
     a08:	7c dc       	rcall	.-1800   	; 0x302 <baby_proof_and_update>
	switch (direction)
     a0a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     a0e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	91 05       	cpc	r25, r1
     a16:	09 f4       	brne	.+2      	; 0xa1a <kolla_efter_kok_left+0x12>
     a18:	d9 c0       	rjmp	.+434    	; 0xbcc <kolla_efter_kok_left+0x1c4>
     a1a:	1c f4       	brge	.+6      	; 0xa22 <kolla_efter_kok_left+0x1a>
     a1c:	89 2b       	or	r24, r25
     a1e:	49 f0       	breq	.+18     	; 0xa32 <kolla_efter_kok_left+0x2a>
     a20:	08 95       	ret
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	91 05       	cpc	r25, r1
     a26:	09 f4       	brne	.+2      	; 0xa2a <kolla_efter_kok_left+0x22>
     a28:	b0 c1       	rjmp	.+864    	; 0xd8a <kolla_efter_kok_left+0x382>
     a2a:	03 97       	sbiw	r24, 0x03	; 3
     a2c:	09 f4       	brne	.+2      	; 0xa30 <kolla_efter_kok_left+0x28>
     a2e:	72 c2       	rjmp	.+1252   	; 0xf14 <kolla_efter_kok_left+0x50c>
     a30:	08 95       	ret
	{
		case 0: //norr
		if (matrix[bot_y][bot_x - 1] == unknown || (matrix[bot_y][bot_x - 1] == drive))
     a32:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     a36:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	22 e3       	ldi	r18, 0x32	; 50
     a3e:	82 9f       	mul	r24, r18
     a40:	e0 0d       	add	r30, r0
     a42:	f1 1d       	adc	r31, r1
     a44:	11 24       	eor	r1, r1
     a46:	ea 5d       	subi	r30, 0xDA	; 218
     a48:	fe 4f       	sbci	r31, 0xFE	; 254
     a4a:	90 81       	ld	r25, Z
     a4c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     a50:	98 17       	cp	r25, r24
     a52:	89 f0       	breq	.+34     	; 0xa76 <kolla_efter_kok_left+0x6e>
     a54:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     a58:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	92 e3       	ldi	r25, 0x32	; 50
     a60:	89 9f       	mul	r24, r25
     a62:	e0 0d       	add	r30, r0
     a64:	f1 1d       	adc	r31, r1
     a66:	11 24       	eor	r1, r1
     a68:	ea 5d       	subi	r30, 0xDA	; 218
     a6a:	fe 4f       	sbci	r31, 0xFE	; 254
     a6c:	90 81       	ld	r25, Z
     a6e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     a72:	98 13       	cpse	r25, r24
     a74:	28 c3       	rjmp	.+1616   	; 0x10c6 <kolla_efter_kok_left+0x6be>
		{
			if ((sens_safe[5] < 25 ) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) && (matrix[bot_y][bot_x - 1] == unknown) ) 
     a76:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     a7a:	89 31       	cpi	r24, 0x19	; 25
     a7c:	08 f0       	brcs	.+2      	; 0xa80 <kolla_efter_kok_left+0x78>
     a7e:	4b c0       	rjmp	.+150    	; 0xb16 <kolla_efter_kok_left+0x10e>
     a80:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     a84:	89 31       	cpi	r24, 0x19	; 25
     a86:	08 f0       	brcs	.+2      	; 0xa8a <kolla_efter_kok_left+0x82>
     a88:	46 c0       	rjmp	.+140    	; 0xb16 <kolla_efter_kok_left+0x10e>
     a8a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     a8e:	84 31       	cpi	r24, 0x14	; 20
     a90:	08 f0       	brcs	.+2      	; 0xa94 <kolla_efter_kok_left+0x8c>
     a92:	41 c0       	rjmp	.+130    	; 0xb16 <kolla_efter_kok_left+0x10e>
     a94:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     a98:	84 31       	cpi	r24, 0x14	; 20
     a9a:	08 f0       	brcs	.+2      	; 0xa9e <kolla_efter_kok_left+0x96>
     a9c:	3c c0       	rjmp	.+120    	; 0xb16 <kolla_efter_kok_left+0x10e>
     a9e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     aa2:	84 31       	cpi	r24, 0x14	; 20
     aa4:	c0 f5       	brcc	.+112    	; 0xb16 <kolla_efter_kok_left+0x10e>
     aa6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     aaa:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	22 e3       	ldi	r18, 0x32	; 50
     ab2:	82 9f       	mul	r24, r18
     ab4:	e0 0d       	add	r30, r0
     ab6:	f1 1d       	adc	r31, r1
     ab8:	11 24       	eor	r1, r1
     aba:	ea 5d       	subi	r30, 0xDA	; 218
     abc:	fe 4f       	sbci	r31, 0xFE	; 254
     abe:	90 81       	ld	r25, Z
     ac0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     ac4:	98 13       	cpse	r25, r24
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <kolla_efter_kok_left+0x10e>
			{	
				if (driven >= 30)
     ac8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     acc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     ad0:	4e 97       	sbiw	r24, 0x1e	; 30
				{
					update_position();
     ad2:	28 f0       	brcs	.+10     	; 0xade <kolla_efter_kok_left+0xd6>
     ad4:	55 dd       	rcall	.-1366   	; 0x580 <update_position>
					driven = 0;
     ad6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     ada:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				}
				matrix[bot_y][bot_x - 1] = wall; // köksö hittad
     ade:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     ae2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     aec:	22 e3       	ldi	r18, 0x32	; 50
     aee:	92 9f       	mul	r25, r18
     af0:	e0 0d       	add	r30, r0
     af2:	f1 1d       	adc	r31, r1
     af4:	11 24       	eor	r1, r1
     af6:	ea 5d       	subi	r30, 0xDA	; 218
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     afa:	80 83       	st	Z, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     afe:	90 d3       	rcall	.+1824   	; 0x1220 <UART0_Transmit>
				UART0_Transmit(stop);
     b00:	e7 dd       	rcall	.-1074   	; 0x6d0 <rot_left>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	8d d3       	rcall	.+1818   	; 0x1220 <UART0_Transmit>
				kokHittad();
     b06:	d8 de       	rcall	.-592    	; 0x8b8 <kokHittad>
     b08:	81 e0       	ldi	r24, 0x01	; 1
				state = 1;
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     b10:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     b14:	08 95       	ret
     b16:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
			}
			else if((sens_safe[5] > 25 ) && (sens_safe[3] > 25) && (sens_safe[5] < 75) && (sens_safe[3] < 75) && (matrix[bot_y][bot_x - 2] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) )
     b1a:	8a 31       	cpi	r24, 0x1A	; 26
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <kolla_efter_kok_left+0x118>
     b1e:	d3 c2       	rjmp	.+1446   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b20:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     b24:	8a 31       	cpi	r24, 0x1A	; 26
     b26:	08 f4       	brcc	.+2      	; 0xb2a <kolla_efter_kok_left+0x122>
     b28:	ce c2       	rjmp	.+1436   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b2a:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     b2e:	8b 34       	cpi	r24, 0x4B	; 75
     b30:	08 f0       	brcs	.+2      	; 0xb34 <kolla_efter_kok_left+0x12c>
     b32:	c9 c2       	rjmp	.+1426   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b34:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     b38:	8b 34       	cpi	r24, 0x4B	; 75
     b3a:	08 f0       	brcs	.+2      	; 0xb3e <kolla_efter_kok_left+0x136>
     b3c:	c4 c2       	rjmp	.+1416   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b3e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     b42:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	92 e3       	ldi	r25, 0x32	; 50
     b4a:	89 9f       	mul	r24, r25
     b4c:	e0 0d       	add	r30, r0
     b4e:	f1 1d       	adc	r31, r1
     b50:	11 24       	eor	r1, r1
     b52:	eb 5d       	subi	r30, 0xDB	; 219
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	90 81       	ld	r25, Z
     b58:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     b5c:	98 13       	cpse	r25, r24
     b5e:	b3 c2       	rjmp	.+1382   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b60:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     b64:	84 31       	cpi	r24, 0x14	; 20
     b66:	08 f0       	brcs	.+2      	; 0xb6a <kolla_efter_kok_left+0x162>
     b68:	ae c2       	rjmp	.+1372   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b6a:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     b6e:	84 31       	cpi	r24, 0x14	; 20
     b70:	08 f0       	brcs	.+2      	; 0xb74 <kolla_efter_kok_left+0x16c>
     b72:	a9 c2       	rjmp	.+1362   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b74:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     b78:	84 31       	cpi	r24, 0x14	; 20
     b7a:	08 f0       	brcs	.+2      	; 0xb7e <kolla_efter_kok_left+0x176>
     b7c:	a4 c2       	rjmp	.+1352   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     b7e:	81 e0       	ldi	r24, 0x01	; 1
			{
				KokFarFarAway = 1;
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     b86:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     b8a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
				if (driven >= 30)
     b8e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     b92:	4e 97       	sbiw	r24, 0x1e	; 30
     b94:	28 f0       	brcs	.+10     	; 0xba0 <kolla_efter_kok_left+0x198>
				{
					update_position();
     b96:	f4 dc       	rcall	.-1560   	; 0x580 <update_position>
     b98:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     b9c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     ba0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
				}
				matrix[bot_y][bot_x - 2] = wall; // köksö hittad
     ba4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     bae:	22 e3       	ldi	r18, 0x32	; 50
     bb0:	92 9f       	mul	r25, r18
     bb2:	e0 0d       	add	r30, r0
     bb4:	f1 1d       	adc	r31, r1
     bb6:	11 24       	eor	r1, r1
     bb8:	eb 5d       	subi	r30, 0xDB	; 219
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	80 83       	st	Z, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     bc0:	2f d3       	rcall	.+1630   	; 0x1220 <UART0_Transmit>
     bc2:	86 dd       	rcall	.-1268   	; 0x6d0 <rot_left>
				UART0_Transmit(stop);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	2c d3       	rcall	.+1624   	; 0x1220 <UART0_Transmit>
     bc8:	77 ce       	rjmp	.-786    	; 0x8b8 <kokHittad>
				kokHittad();
     bca:	08 95       	ret
     bcc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			}
		}
		break;
		
		case 1: //ÖST
		if (matrix[bot_y + 1][bot_x] == unknown || (matrix[bot_y + 1][bot_x] == drive))
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     bd8:	32 e3       	ldi	r19, 0x32	; 50
     bda:	38 9f       	mul	r19, r24
     bdc:	f0 01       	movw	r30, r0
     bde:	39 9f       	mul	r19, r25
     be0:	f0 0d       	add	r31, r0
     be2:	11 24       	eor	r1, r1
     be4:	e9 5d       	subi	r30, 0xD9	; 217
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	e2 0f       	add	r30, r18
     bea:	f1 1d       	adc	r31, r1
     bec:	90 81       	ld	r25, Z
     bee:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     bf2:	98 17       	cp	r25, r24
     bf4:	a1 f0       	breq	.+40     	; 0xc1e <kolla_efter_kok_left+0x216>
     bf6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     c02:	38 9f       	mul	r19, r24
     c04:	f0 01       	movw	r30, r0
     c06:	39 9f       	mul	r19, r25
     c08:	f0 0d       	add	r31, r0
     c0a:	11 24       	eor	r1, r1
     c0c:	e9 5d       	subi	r30, 0xD9	; 217
     c0e:	fe 4f       	sbci	r31, 0xFE	; 254
     c10:	e2 0f       	add	r30, r18
     c12:	f1 1d       	adc	r31, r1
     c14:	90 81       	ld	r25, Z
     c16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     c1a:	98 13       	cpse	r25, r24
     c1c:	54 c2       	rjmp	.+1192   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     c1e:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
		{
			if ((sens_safe[5] < 25) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) && (matrix[bot_y + 1][bot_x] == unknown) )
     c22:	89 31       	cpi	r24, 0x19	; 25
     c24:	08 f0       	brcs	.+2      	; 0xc28 <kolla_efter_kok_left+0x220>
     c26:	4e c0       	rjmp	.+156    	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c28:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     c2c:	89 31       	cpi	r24, 0x19	; 25
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <kolla_efter_kok_left+0x22a>
     c30:	49 c0       	rjmp	.+146    	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c32:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     c36:	84 31       	cpi	r24, 0x14	; 20
     c38:	08 f0       	brcs	.+2      	; 0xc3c <kolla_efter_kok_left+0x234>
     c3a:	44 c0       	rjmp	.+136    	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c3c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     c40:	84 31       	cpi	r24, 0x14	; 20
     c42:	08 f0       	brcs	.+2      	; 0xc46 <kolla_efter_kok_left+0x23e>
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c46:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     c4a:	84 31       	cpi	r24, 0x14	; 20
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <kolla_efter_kok_left+0x248>
     c4e:	3a c0       	rjmp	.+116    	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c50:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     c5c:	32 e3       	ldi	r19, 0x32	; 50
     c5e:	38 9f       	mul	r19, r24
     c60:	f0 01       	movw	r30, r0
     c62:	39 9f       	mul	r19, r25
     c64:	f0 0d       	add	r31, r0
     c66:	11 24       	eor	r1, r1
     c68:	e9 5d       	subi	r30, 0xD9	; 217
     c6a:	fe 4f       	sbci	r31, 0xFE	; 254
     c6c:	e2 0f       	add	r30, r18
     c6e:	f1 1d       	adc	r31, r1
     c70:	90 81       	ld	r25, Z
     c72:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     c76:	98 13       	cpse	r25, r24
     c78:	25 c0       	rjmp	.+74     	; 0xcc4 <kolla_efter_kok_left+0x2bc>
     c7a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
			{
				if (driven >= 30)
     c7e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     c82:	4e 97       	sbiw	r24, 0x1e	; 30
     c84:	28 f0       	brcs	.+10     	; 0xc90 <kolla_efter_kok_left+0x288>
     c86:	7c dc       	rcall	.-1800   	; 0x580 <update_position>
				{
					update_position();
     c88:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     c8c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     c90:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
				}
				
				matrix[bot_y + 1][bot_x] = wall; // köksö hittad
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     c9c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     ca0:	42 e3       	ldi	r20, 0x32	; 50
     ca2:	48 9f       	mul	r20, r24
     ca4:	f0 01       	movw	r30, r0
     ca6:	49 9f       	mul	r20, r25
     ca8:	f0 0d       	add	r31, r0
     caa:	11 24       	eor	r1, r1
     cac:	e9 5d       	subi	r30, 0xD9	; 217
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	e3 0f       	add	r30, r19
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     cb2:	f1 1d       	adc	r31, r1
     cb4:	20 83       	st	Z, r18
     cb6:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     cb8:	b3 d2       	rcall	.+1382   	; 0x1220 <UART0_Transmit>
     cba:	0a dd       	rcall	.-1516   	; 0x6d0 <rot_left>
				UART0_Transmit(stop);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	b0 d2       	rcall	.+1376   	; 0x1220 <UART0_Transmit>
     cc0:	fb cd       	rjmp	.-1034   	; 0x8b8 <kokHittad>
				kokHittad();
     cc2:	08 95       	ret
     cc4:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
			}
			else if((sens_safe[5] > 25 ) && (sens_safe[3] > 25) && (sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y + 2][bot_x] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) )
     cc8:	8a 31       	cpi	r24, 0x1A	; 26
     cca:	08 f4       	brcc	.+2      	; 0xcce <kolla_efter_kok_left+0x2c6>
     ccc:	fc c1       	rjmp	.+1016   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     cce:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     cd2:	8a 31       	cpi	r24, 0x1A	; 26
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <kolla_efter_kok_left+0x2d0>
     cd6:	f7 c1       	rjmp	.+1006   	; 0x10c6 <kolla_efter_kok_left+0x6be>
     cd8:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     cdc:	86 34       	cpi	r24, 0x46	; 70
     cde:	08 f0       	brcs	.+2      	; 0xce2 <kolla_efter_kok_left+0x2da>
     ce0:	f2 c1       	rjmp	.+996    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     ce2:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     ce6:	86 34       	cpi	r24, 0x46	; 70
     ce8:	08 f0       	brcs	.+2      	; 0xcec <kolla_efter_kok_left+0x2e4>
     cea:	ed c1       	rjmp	.+986    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     cec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 96       	adiw	r24, 0x02	; 2
     cf4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     cf8:	32 e3       	ldi	r19, 0x32	; 50
     cfa:	38 9f       	mul	r19, r24
     cfc:	f0 01       	movw	r30, r0
     cfe:	39 9f       	mul	r19, r25
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	e9 5d       	subi	r30, 0xD9	; 217
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	e2 0f       	add	r30, r18
     d0a:	f1 1d       	adc	r31, r1
     d0c:	90 81       	ld	r25, Z
     d0e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     d12:	98 13       	cpse	r25, r24
     d14:	d8 c1       	rjmp	.+944    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     d16:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     d1a:	84 31       	cpi	r24, 0x14	; 20
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <kolla_efter_kok_left+0x318>
     d1e:	d3 c1       	rjmp	.+934    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     d20:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     d24:	84 31       	cpi	r24, 0x14	; 20
     d26:	08 f0       	brcs	.+2      	; 0xd2a <kolla_efter_kok_left+0x322>
     d28:	ce c1       	rjmp	.+924    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     d2a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     d2e:	84 31       	cpi	r24, 0x14	; 20
     d30:	08 f0       	brcs	.+2      	; 0xd34 <kolla_efter_kok_left+0x32c>
     d32:	c9 c1       	rjmp	.+914    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     d34:	81 e0       	ldi	r24, 0x01	; 1
			{
				KokFarFarAway = 1;
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     d3c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     d40:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
				if (driven >= 30)
     d44:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     d48:	4e 97       	sbiw	r24, 0x1e	; 30
     d4a:	28 f0       	brcs	.+10     	; 0xd56 <kolla_efter_kok_left+0x34e>
     d4c:	19 dc       	rcall	.-1998   	; 0x580 <update_position>
				{
					update_position();
     d4e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     d52:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     d56:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
				}
				
				matrix[bot_y + 2][bot_x] = wall; // köksö hittad
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 96       	adiw	r24, 0x02	; 2
     d5e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     d62:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     d66:	42 e3       	ldi	r20, 0x32	; 50
     d68:	48 9f       	mul	r20, r24
     d6a:	f0 01       	movw	r30, r0
     d6c:	49 9f       	mul	r20, r25
     d6e:	f0 0d       	add	r31, r0
     d70:	11 24       	eor	r1, r1
     d72:	e9 5d       	subi	r30, 0xD9	; 217
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	e3 0f       	add	r30, r19
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     d78:	f1 1d       	adc	r31, r1
     d7a:	20 83       	st	Z, r18
     d7c:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     d7e:	50 d2       	rcall	.+1184   	; 0x1220 <UART0_Transmit>
     d80:	a7 dc       	rcall	.-1714   	; 0x6d0 <rot_left>
				UART0_Transmit(stop);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	4d d2       	rcall	.+1178   	; 0x1220 <UART0_Transmit>
     d86:	98 cd       	rjmp	.-1232   	; 0x8b8 <kokHittad>
				kokHittad();
     d88:	08 95       	ret
     d8a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			}
		}
		break;
		
		case 2:
		if (matrix[bot_y][bot_x + 1] == unknown || (matrix[bot_y][bot_x + 1] == drive))
     d8e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	92 e3       	ldi	r25, 0x32	; 50
     d96:	89 9f       	mul	r24, r25
     d98:	e0 0d       	add	r30, r0
     d9a:	f1 1d       	adc	r31, r1
     d9c:	11 24       	eor	r1, r1
     d9e:	e8 5d       	subi	r30, 0xD8	; 216
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	90 81       	ld	r25, Z
     da4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     da8:	98 17       	cp	r25, r24
     daa:	89 f0       	breq	.+34     	; 0xdce <kolla_efter_kok_left+0x3c6>
     dac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     db0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	22 e3       	ldi	r18, 0x32	; 50
     db8:	82 9f       	mul	r24, r18
     dba:	e0 0d       	add	r30, r0
     dbc:	f1 1d       	adc	r31, r1
     dbe:	11 24       	eor	r1, r1
     dc0:	e8 5d       	subi	r30, 0xD8	; 216
     dc2:	fe 4f       	sbci	r31, 0xFE	; 254
     dc4:	90 81       	ld	r25, Z
     dc6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     dca:	98 13       	cpse	r25, r24
     dcc:	7c c1       	rjmp	.+760    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     dce:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
		{
			if ((sens_safe[5] < 25) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) && (matrix[bot_y][bot_x + 1] == unknown)) // ökat från 20
     dd2:	89 31       	cpi	r24, 0x19	; 25
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <kolla_efter_kok_left+0x3d0>
     dd6:	49 c0       	rjmp	.+146    	; 0xe6a <kolla_efter_kok_left+0x462>
     dd8:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     ddc:	89 31       	cpi	r24, 0x19	; 25
     dde:	08 f0       	brcs	.+2      	; 0xde2 <kolla_efter_kok_left+0x3da>
     de0:	44 c0       	rjmp	.+136    	; 0xe6a <kolla_efter_kok_left+0x462>
     de2:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     de6:	84 31       	cpi	r24, 0x14	; 20
     de8:	08 f0       	brcs	.+2      	; 0xdec <kolla_efter_kok_left+0x3e4>
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <kolla_efter_kok_left+0x462>
     dec:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     df0:	84 31       	cpi	r24, 0x14	; 20
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <kolla_efter_kok_left+0x3ee>
     df4:	3a c0       	rjmp	.+116    	; 0xe6a <kolla_efter_kok_left+0x462>
     df6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     dfa:	84 31       	cpi	r24, 0x14	; 20
     dfc:	b0 f5       	brcc	.+108    	; 0xe6a <kolla_efter_kok_left+0x462>
     dfe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     e02:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	92 e3       	ldi	r25, 0x32	; 50
     e0a:	89 9f       	mul	r24, r25
     e0c:	e0 0d       	add	r30, r0
     e0e:	f1 1d       	adc	r31, r1
     e10:	11 24       	eor	r1, r1
     e12:	e8 5d       	subi	r30, 0xD8	; 216
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	90 81       	ld	r25, Z
     e18:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     e1c:	98 13       	cpse	r25, r24
     e1e:	25 c0       	rjmp	.+74     	; 0xe6a <kolla_efter_kok_left+0x462>
     e20:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
			{
				if (driven >= 30)
     e24:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     e28:	4e 97       	sbiw	r24, 0x1e	; 30
     e2a:	28 f0       	brcs	.+10     	; 0xe36 <kolla_efter_kok_left+0x42e>
     e2c:	a9 db       	rcall	.-2222   	; 0x580 <update_position>
				{
					update_position();
     e2e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     e32:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     e36:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
				}
				matrix[bot_y][bot_x + 1] = wall; // köksö hittad
     e3a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     e44:	22 e3       	ldi	r18, 0x32	; 50
     e46:	92 9f       	mul	r25, r18
     e48:	e0 0d       	add	r30, r0
     e4a:	f1 1d       	adc	r31, r1
     e4c:	11 24       	eor	r1, r1
     e4e:	e8 5d       	subi	r30, 0xD8	; 216
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
				driven = 0; // för att inte gå in i update igen inuti rot_left
     e52:	80 83       	st	Z, r24
     e54:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     e58:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				UART0_Transmit(stop);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	e0 d1       	rcall	.+960    	; 0x1220 <UART0_Transmit>
				rot_left();
     e60:	37 dc       	rcall	.-1938   	; 0x6d0 <rot_left>
     e62:	80 e0       	ldi	r24, 0x00	; 0
				UART0_Transmit(stop);
     e64:	dd d1       	rcall	.+954    	; 0x1220 <UART0_Transmit>
     e66:	28 cd       	rjmp	.-1456   	; 0x8b8 <kokHittad>
     e68:	08 95       	ret
				kokHittad();
     e6a:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     e6e:	86 34       	cpi	r24, 0x46	; 70
				
			}
			else if((sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y][bot_x + 2] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) ) // ökat från 60
     e70:	08 f0       	brcs	.+2      	; 0xe74 <kolla_efter_kok_left+0x46c>
     e72:	29 c1       	rjmp	.+594    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     e74:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     e78:	86 34       	cpi	r24, 0x46	; 70
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <kolla_efter_kok_left+0x476>
     e7c:	24 c1       	rjmp	.+584    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     e7e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     e82:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	92 e3       	ldi	r25, 0x32	; 50
     e8a:	89 9f       	mul	r24, r25
     e8c:	e0 0d       	add	r30, r0
     e8e:	f1 1d       	adc	r31, r1
     e90:	11 24       	eor	r1, r1
     e92:	e7 5d       	subi	r30, 0xD7	; 215
     e94:	fe 4f       	sbci	r31, 0xFE	; 254
     e96:	90 81       	ld	r25, Z
     e98:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     e9c:	98 13       	cpse	r25, r24
     e9e:	13 c1       	rjmp	.+550    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     ea0:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     ea4:	84 31       	cpi	r24, 0x14	; 20
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <kolla_efter_kok_left+0x4a2>
     ea8:	0e c1       	rjmp	.+540    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     eaa:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     eae:	84 31       	cpi	r24, 0x14	; 20
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <kolla_efter_kok_left+0x4ac>
     eb2:	09 c1       	rjmp	.+530    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     eb4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     eb8:	84 31       	cpi	r24, 0x14	; 20
     eba:	08 f0       	brcs	.+2      	; 0xebe <kolla_efter_kok_left+0x4b6>
     ebc:	04 c1       	rjmp	.+520    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
			{
				KokFarFarAway = 1;
     ec2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     ec6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     eca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
				if (driven >= 30)
     ece:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     ed2:	4e 97       	sbiw	r24, 0x1e	; 30
     ed4:	28 f0       	brcs	.+10     	; 0xee0 <kolla_efter_kok_left+0x4d8>
     ed6:	54 db       	rcall	.-2392   	; 0x580 <update_position>
				{
					update_position();
     ed8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     edc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				}
				matrix[bot_y][bot_x + 2] = wall; // köksö hittad
     ee0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     ee4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     eee:	22 e3       	ldi	r18, 0x32	; 50
     ef0:	92 9f       	mul	r25, r18
     ef2:	e0 0d       	add	r30, r0
     ef4:	f1 1d       	adc	r31, r1
     ef6:	11 24       	eor	r1, r1
     ef8:	e7 5d       	subi	r30, 0xD7	; 215
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
				driven = 0; // för att inte gå in i update igen inuti rot_left
     efc:	80 83       	st	Z, r24
     efe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     f02:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				UART0_Transmit(stop);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	8b d1       	rcall	.+790    	; 0x1220 <UART0_Transmit>
				rot_left();
     f0a:	e2 db       	rcall	.-2108   	; 0x6d0 <rot_left>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
				UART0_Transmit(stop);
     f0e:	88 d1       	rcall	.+784    	; 0x1220 <UART0_Transmit>
     f10:	d3 cc       	rjmp	.-1626   	; 0x8b8 <kokHittad>
     f12:	08 95       	ret
				kokHittad();
     f14:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     f18:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		break;
		
		case 3:
		if ((matrix[bot_y - 1][bot_x] == unknown) || (matrix[bot_y - 1][bot_x] == drive))
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     f20:	32 e3       	ldi	r19, 0x32	; 50
     f22:	38 9f       	mul	r19, r24
     f24:	f0 01       	movw	r30, r0
     f26:	39 9f       	mul	r19, r25
     f28:	f0 0d       	add	r31, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	e9 5d       	subi	r30, 0xD9	; 217
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	e2 0f       	add	r30, r18
     f32:	f1 1d       	adc	r31, r1
     f34:	90 81       	ld	r25, Z
     f36:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     f3a:	98 17       	cp	r25, r24
     f3c:	a1 f0       	breq	.+40     	; 0xf66 <kolla_efter_kok_left+0x55e>
     f3e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     f4a:	38 9f       	mul	r19, r24
     f4c:	f0 01       	movw	r30, r0
     f4e:	39 9f       	mul	r19, r25
     f50:	f0 0d       	add	r31, r0
     f52:	11 24       	eor	r1, r1
     f54:	e9 5d       	subi	r30, 0xD9	; 217
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	e2 0f       	add	r30, r18
     f5a:	f1 1d       	adc	r31, r1
     f5c:	90 81       	ld	r25, Z
     f5e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     f62:	98 13       	cpse	r25, r24
     f64:	b0 c0       	rjmp	.+352    	; 0x10c6 <kolla_efter_kok_left+0x6be>
     f66:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     f6a:	89 31       	cpi	r24, 0x19	; 25
		{
			if ((sens_safe[5] < 25 && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) && (matrix[bot_y - 1][bot_x] == unknown)))
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <kolla_efter_kok_left+0x568>
     f6e:	52 c0       	rjmp	.+164    	; 0x1014 <kolla_efter_kok_left+0x60c>
     f70:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     f74:	89 31       	cpi	r24, 0x19	; 25
     f76:	08 f0       	brcs	.+2      	; 0xf7a <kolla_efter_kok_left+0x572>
     f78:	4d c0       	rjmp	.+154    	; 0x1014 <kolla_efter_kok_left+0x60c>
     f7a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     f7e:	84 31       	cpi	r24, 0x14	; 20
     f80:	08 f0       	brcs	.+2      	; 0xf84 <kolla_efter_kok_left+0x57c>
     f82:	48 c0       	rjmp	.+144    	; 0x1014 <kolla_efter_kok_left+0x60c>
     f84:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     f88:	84 31       	cpi	r24, 0x14	; 20
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <kolla_efter_kok_left+0x586>
     f8c:	43 c0       	rjmp	.+134    	; 0x1014 <kolla_efter_kok_left+0x60c>
     f8e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     f92:	84 31       	cpi	r24, 0x14	; 20
     f94:	08 f0       	brcs	.+2      	; 0xf98 <kolla_efter_kok_left+0x590>
     f96:	3e c0       	rjmp	.+124    	; 0x1014 <kolla_efter_kok_left+0x60c>
     f98:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     fa4:	32 e3       	ldi	r19, 0x32	; 50
     fa6:	38 9f       	mul	r19, r24
     fa8:	f0 01       	movw	r30, r0
     faa:	39 9f       	mul	r19, r25
     fac:	f0 0d       	add	r31, r0
     fae:	11 24       	eor	r1, r1
     fb0:	e9 5d       	subi	r30, 0xD9	; 217
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	e2 0f       	add	r30, r18
     fb6:	f1 1d       	adc	r31, r1
     fb8:	90 81       	ld	r25, Z
     fba:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     fbe:	98 13       	cpse	r25, r24
     fc0:	29 c0       	rjmp	.+82     	; 0x1014 <kolla_efter_kok_left+0x60c>
     fc2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
			{
				if (driven >= 30)
     fc6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     fca:	4e 97       	sbiw	r24, 0x1e	; 30
     fcc:	28 f0       	brcs	.+10     	; 0xfd8 <kolla_efter_kok_left+0x5d0>
     fce:	d8 da       	rcall	.-2640   	; 0x580 <update_position>
				{
					update_position();
     fd0:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
					driven = 0;
     fd4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				}
				matrix[bot_y - 1][bot_x] = wall; // köksö hittad
     fd8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     fe4:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     fe8:	42 e3       	ldi	r20, 0x32	; 50
     fea:	48 9f       	mul	r20, r24
     fec:	f0 01       	movw	r30, r0
     fee:	49 9f       	mul	r20, r25
     ff0:	f0 0d       	add	r31, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	e9 5d       	subi	r30, 0xD9	; 217
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	e3 0f       	add	r30, r19
     ffa:	f1 1d       	adc	r31, r1
     ffc:	20 83       	st	Z, r18
				driven = 0; // för att inte gå in i update igen inuti rot_left
     ffe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
    1002:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				UART0_Transmit(stop);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0b d1       	rcall	.+534    	; 0x1220 <UART0_Transmit>
    100a:	62 db       	rcall	.-2364   	; 0x6d0 <rot_left>
				rot_left();
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 d1       	rcall	.+528    	; 0x1220 <UART0_Transmit>
				UART0_Transmit(stop);
    1010:	53 cc       	rjmp	.-1882   	; 0x8b8 <kokHittad>
    1012:	08 95       	ret
    1014:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
				kokHittad();
    1018:	86 34       	cpi	r24, 0x46	; 70
    101a:	08 f0       	brcs	.+2      	; 0x101e <kolla_efter_kok_left+0x616>
			}
			else if((sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y - 2][bot_x] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20)  )
    101c:	54 c0       	rjmp	.+168    	; 0x10c6 <kolla_efter_kok_left+0x6be>
    101e:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
    1022:	86 34       	cpi	r24, 0x46	; 70
    1024:	08 f0       	brcs	.+2      	; 0x1028 <kolla_efter_kok_left+0x620>
    1026:	4f c0       	rjmp	.+158    	; 0x10c6 <kolla_efter_kok_left+0x6be>
    1028:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 97       	sbiw	r24, 0x02	; 2
    1030:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
    1034:	32 e3       	ldi	r19, 0x32	; 50
    1036:	38 9f       	mul	r19, r24
    1038:	f0 01       	movw	r30, r0
    103a:	39 9f       	mul	r19, r25
    103c:	f0 0d       	add	r31, r0
    103e:	11 24       	eor	r1, r1
    1040:	e9 5d       	subi	r30, 0xD9	; 217
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	e2 0f       	add	r30, r18
    1046:	f1 1d       	adc	r31, r1
    1048:	90 81       	ld	r25, Z
    104a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
    104e:	98 13       	cpse	r25, r24
    1050:	3a c0       	rjmp	.+116    	; 0x10c6 <kolla_efter_kok_left+0x6be>
    1052:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
    1056:	84 31       	cpi	r24, 0x14	; 20
    1058:	b0 f5       	brcc	.+108    	; 0x10c6 <kolla_efter_kok_left+0x6be>
    105a:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
    105e:	84 31       	cpi	r24, 0x14	; 20
    1060:	90 f5       	brcc	.+100    	; 0x10c6 <kolla_efter_kok_left+0x6be>
    1062:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
    1066:	84 31       	cpi	r24, 0x14	; 20
    1068:	70 f5       	brcc	.+92     	; 0x10c6 <kolla_efter_kok_left+0x6be>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
			{
				KokFarFarAway = 1;
    1072:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
    1076:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
				if (driven >= 30)
    107a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
    107e:	4e 97       	sbiw	r24, 0x1e	; 30
				{
					update_position();
    1080:	28 f0       	brcs	.+10     	; 0x108c <kolla_efter_kok_left+0x684>
    1082:	7e da       	rcall	.-2820   	; 0x580 <update_position>
					driven = 0;
    1084:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
    1088:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				}
				matrix[bot_y - 2][bot_x] = wall; // köksö hittad
    108c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 97       	sbiw	r24, 0x02	; 2
    1094:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
    1098:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
    109c:	42 e3       	ldi	r20, 0x32	; 50
    109e:	48 9f       	mul	r20, r24
    10a0:	f0 01       	movw	r30, r0
    10a2:	49 9f       	mul	r20, r25
    10a4:	f0 0d       	add	r31, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	e9 5d       	subi	r30, 0xD9	; 217
    10aa:	fe 4f       	sbci	r31, 0xFE	; 254
    10ac:	e3 0f       	add	r30, r19
    10ae:	f1 1d       	adc	r31, r1
    10b0:	20 83       	st	Z, r18
				driven = 0; // för att inte gå in i update igen inuti rot_left
    10b2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
    10b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				UART0_Transmit(stop);
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	b1 d0       	rcall	.+354    	; 0x1220 <UART0_Transmit>
    10be:	08 db       	rcall	.-2544   	; 0x6d0 <rot_left>
				rot_left();
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	ae d0       	rcall	.+348    	; 0x1220 <UART0_Transmit>
				UART0_Transmit(stop);
    10c4:	f9 cb       	rjmp	.-2062   	; 0x8b8 <kokHittad>
    10c6:	08 95       	ret

000010c8 <navigation>:
    10c8:	1c d9       	rcall	.-3528   	; 0x302 <baby_proof_and_update>
				kokHittad();
    10ca:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
    10ce:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
}
void navigation() // testa att bara svänga när väggar inte finns, ej 40cm
{
	baby_proof_and_update();
	
	if (ny_fram < (start_dist))
    10d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <start_dist>
    10d6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <start_dist+0x1>
    10da:	28 17       	cp	r18, r24
    10dc:	39 07       	cpc	r19, r25
    10de:	70 f4       	brcc	.+28     	; 0x10fc <navigation+0x34>
	{
		driven = (start_dist - ny_fram);
    10e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <start_dist>
    10e4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <start_dist+0x1>
    10e8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
    10ec:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
    10f0:	82 1b       	sub	r24, r18
    10f2:	93 0b       	sbc	r25, r19
    10f4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <driven+0x1>
    10f8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <driven>
	}
	
	if (((driven) >= 36) && (harRot == 0)) // var 35 innan // funka nästan vid 37
    10fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
    1100:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
    1104:	84 97       	sbiw	r24, 0x24	; 36
    1106:	88 f0       	brcs	.+34     	; 0x112a <navigation+0x62>
    1108:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    110c:	81 11       	cpse	r24, r1
	{
	 	update_position();
    110e:	0d c0       	rjmp	.+26     	; 0x112a <navigation+0x62>
    1110:	37 da       	rcall	.-2962   	; 0x580 <update_position>
		start_dist = ny_fram; 
    1112:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
    1116:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
    111a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
    111e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
		driven = 0;
    1122:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
    1126:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	
	}


	if ( (sens_safe[0] > 30) && (sens_safe[1] > 30) && (sens_safe[4] > 40) && (harRot == 0))
    112a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
    112e:	8f 31       	cpi	r24, 0x1F	; 31
    1130:	a0 f0       	brcs	.+40     	; 0x115a <navigation+0x92>
    1132:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
    1136:	8f 31       	cpi	r24, 0x1F	; 31
    1138:	80 f0       	brcs	.+32     	; 0x115a <navigation+0x92>
    113a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
    113e:	89 32       	cpi	r24, 0x29	; 41
    1140:	60 f0       	brcs	.+24     	; 0x115a <navigation+0x92>
    1142:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    1146:	81 11       	cpse	r24, r1
    1148:	08 c0       	rjmp	.+16     	; 0x115a <navigation+0x92>
    114a:	8c ec       	ldi	r24, 0xCC	; 204
    114c:	9c e1       	ldi	r25, 0x1C	; 28
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <navigation+0x86>
    1152:	00 c0       	rjmp	.+0      	; 0x1154 <navigation+0x8c>
	{
		_delay_ms(2);
		rot_right();
    1154:	00 00       	nop
    1156:	87 da       	rcall	.-2802   	; 0x666 <rot_right>
    1158:	24 c0       	rjmp	.+72     	; 0x11a2 <navigation+0xda>
	}

	else if ((sens_safe[4] < 40) && (ny_fram < stop_dist) && (sens_safe[2] < 30) &&  (harRot == 0)) // 18 13dec. 21 14 dec
    115a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
    115e:	88 32       	cpi	r24, 0x28	; 40
    1160:	d8 f4       	brcc	.+54     	; 0x1198 <navigation+0xd0>
    1162:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
    1166:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
    116a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    116e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	80 f4       	brcc	.+32     	; 0x1198 <navigation+0xd0>
    1178:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <sens_safe+0x2>
    117c:	8e 31       	cpi	r24, 0x1E	; 30
    117e:	60 f4       	brcc	.+24     	; 0x1198 <navigation+0xd0>
    1180:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    1184:	81 11       	cpse	r24, r1
	{
		rot_left();
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <navigation+0xd0>
    1188:	a3 da       	rcall	.-2746   	; 0x6d0 <rot_left>
		stop_dist = 13;
    118a:	8d e0       	ldi	r24, 0x0D	; 13
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1192:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <navigation+0xda>
	}

	else if (harRot == 1) // ska köra fram om vi rotera förra gången
    1198:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    119c:	81 30       	cpi	r24, 0x01	; 1
	{
		go_forward();
    119e:	09 f4       	brne	.+2      	; 0x11a2 <navigation+0xda>
    11a0:	93 d8       	rcall	.-3802   	; 0x2c8 <go_forward>
	}
	
 	if ((state == 2) && (harRot == 0 ))
    11a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
    11a6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
    11aa:	02 97       	sbiw	r24, 0x02	; 2
    11ac:	29 f4       	brne	.+10     	; 0x11b8 <navigation+0xf0>
    11ae:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    11b2:	81 11       	cpse	r24, r1
	kolla_efter_kok_left();
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <navigation+0xf0>
    11b6:	28 cc       	rjmp	.-1968   	; 0xa08 <kolla_efter_kok_left>
    11b8:	08 95       	ret

000011ba <main>:
}
	
int main(void)
{

Init();
    11ba:	0e 94 66 00 	call	0xcc	; 0xcc <Init>

while(1)
    {
		if(recieve_renewed)
    11be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <recieve_renewed>
    11c2:	81 11       	cpse	r24, r1
			{
				 handle_incoming_data();
    11c4:	e6 d8       	rcall	.-3636   	; 0x392 <handle_incoming_data>
			}
			
		if(AUTO == 1 )
    11c6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <AUTO>
    11ca:	81 30       	cpi	r24, 0x01	; 1
		{
			navigation(); 
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <main+0x16>
    11ce:	7c df       	rcall	.-264    	; 0x10c8 <navigation>
		}
		if(MANUELL == 1)
    11d0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MANUELL>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	99 f7       	brne	.-26     	; 0x11be <main+0x4>
		{ 
			UART0_Transmit(laptop_in);
    11d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
    11dc:	21 d0       	rcall	.+66     	; 0x1220 <UART0_Transmit>
    11de:	ef cf       	rjmp	.-34     	; 0x11be <main+0x4>

000011e0 <UART1_Init>:
{
	
	while( !(UCSR1A & (1<<RXC1)) );

	return UDR1;
}
    11e0:	88 e9       	ldi	r24, 0x98	; 152
    11e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    11e6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    11ea:	87 e0       	ldi	r24, 0x07	; 7
    11ec:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    11f0:	86 e0       	ldi	r24, 0x06	; 6
    11f2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    11f6:	08 95       	ret

000011f8 <UART0_Init>:
    11f8:	88 e9       	ldi	r24, 0x98	; 152
    11fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11fe:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1202:	87 e1       	ldi	r24, 0x17	; 23
    1204:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1208:	8e e0       	ldi	r24, 0x0E	; 14
    120a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    120e:	08 95       	ret

00001210 <UART1_Transmit>:
    1210:	e8 ec       	ldi	r30, 0xC8	; 200
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	90 81       	ld	r25, Z
    1216:	95 ff       	sbrs	r25, 5
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <UART1_Transmit+0x4>
    121a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    121e:	08 95       	ret

00001220 <UART0_Transmit>:

void UART0_Transmit(unsigned char data)
{
	
	while( !(UCSR0A & (1<<UDRE0)) );
    1220:	e0 ec       	ldi	r30, 0xC0	; 192
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	90 81       	ld	r25, Z
    1226:	95 ff       	sbrs	r25, 5
    1228:	fd cf       	rjmp	.-6      	; 0x1224 <UART0_Transmit+0x4>

	UDR0 = data;
    122a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    122e:	08 95       	ret

00001230 <_exit>:
    1230:	f8 94       	cli

00001232 <__stop_program>:
    1232:	ff cf       	rjmp	.-2      	; 0x1232 <__stop_program>
