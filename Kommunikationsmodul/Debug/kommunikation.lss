
kommunikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000010b8  0000114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000051e  00800108  00800108  00001154  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001472  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  00002736  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f0a  00000000  00000000  0000312a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00004034  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a4  00000000  00000000  00004268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000356  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	dc c0       	rjmp	.+440    	; 0x20a <__vector_20>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b9 c0       	rjmp	.+370    	; 0x1e4 <__vector_28>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 eb       	ldi	r30, 0xB8	; 184
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 30       	cpi	r26, 0x08	; 8
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a8 e0       	ldi	r26, 0x08	; 8
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 32       	cpi	r26, 0x26	; 38
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	be d7       	rcall	.+3964   	; 0x1040 <main>
      c4:	f7 c7       	rjmp	.+4078   	; 0x10b4 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init>:
void state1();
void baby_proof_and_update();

void Init()
{
	DDRD = 0b01100110; //D-port initiering 1 utg?ng 0 ing?ng 00100110
      c8:	86 e6       	ldi	r24, 0x66	; 102
      ca:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11111111;
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	84 b9       	out	0x04, r24	; 4

	UART0_Init(); //styr och sensor
      d0:	d5 d7       	rcall	.+4010   	; 0x107c <UART0_Init>
	UART1_Init(); // bl?tand
      d2:	c8 d7       	rcall	.+3984   	; 0x1064 <UART1_Init>
      d4:	78 94       	sei
	sei(); //enable interrupts
      d6:	08 95       	ret

000000d8 <update_direction>:
      d8:	00 97       	sbiw	r24, 0x00	; 0
}

void update_direction(int dir_dir) //sett från robo start är 0 fram, 1 höger, 2 bakåt, 3 vänster. input: 0 efter höger_rot, 1 efter vänster_rot
{
	switch(dir_dir)
      da:	21 f0       	breq	.+8      	; 0xe4 <update_direction+0xc>
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	91 05       	cpc	r25, r1
      e0:	b9 f0       	breq	.+46     	; 0x110 <update_direction+0x38>
      e2:	2c c0       	rjmp	.+88     	; 0x13c <update_direction+0x64>
	{
		case 0:
		direction = direction + 1;
      e4:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
      e8:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
      ec:	2f 5f       	subi	r18, 0xFF	; 255
      ee:	3f 4f       	sbci	r19, 0xFF	; 255
      f0:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
      f4:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		if(direction == 4)
      f8:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
      fc:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     100:	24 30       	cpi	r18, 0x04	; 4
     102:	31 05       	cpc	r19, r1
     104:	d9 f4       	brne	.+54     	; 0x13c <update_direction+0x64>
		{
			direction = 0;
     106:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <direction+0x1>
     10a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <direction>
     10e:	16 c0       	rjmp	.+44     	; 0x13c <update_direction+0x64>
		}
		break;
		case 1:
		direction = direction - 1;
     110:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     114:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     118:	21 50       	subi	r18, 0x01	; 1
     11a:	31 09       	sbc	r19, r1
     11c:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
     120:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		if (direction < 0)
     124:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     128:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     12c:	33 23       	and	r19, r19
     12e:	34 f4       	brge	.+12     	; 0x13c <update_direction+0x64>
		{
			direction = 3;
     130:	23 e0       	ldi	r18, 0x03	; 3
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <direction+0x1>
     138:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <direction>
		}
		break;
		
	}
	sensor_in[14] = direction;
     13c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <direction>
     140:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <direction+0x1>
     144:	ed e0       	ldi	r30, 0x0D	; 13
     146:	f6 e0       	ldi	r31, 0x06	; 6
     148:	26 87       	std	Z+14, r18	; 0x0e
	sensor_in[11] = dir_dir;
     14a:	83 87       	std	Z+11, r24	; 0x0b
     14c:	08 95       	ret

0000014e <send_matrix>:
}

void send_matrix()
{
     14e:	bf 92       	push	r11
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	0f 93       	push	r16
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	e1 2c       	mov	r14, r1
     162:	f1 2c       	mov	r15, r1
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
		{
			if (matrix[y][x] == wall)
     164:	0f 2e       	mov	r0, r31
     166:	f2 e3       	ldi	r31, 0x32	; 50
     168:	bf 2e       	mov	r11, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	24 c0       	rjmp	.+72     	; 0x1b6 <send_matrix+0x68>
     16e:	dc 2e       	mov	r13, r28
     170:	f8 01       	movw	r30, r16
     172:	ec 0f       	add	r30, r28
     174:	fd 1f       	adc	r31, r29
     176:	90 81       	ld	r25, Z
     178:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     17c:	98 13       	cpse	r25, r24
     17e:	10 c0       	rjmp	.+32     	; 0x1a0 <send_matrix+0x52>
			{
				laptop_in = 0;
     180:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
				UART1_Transmit(y);
     184:	8c 2d       	mov	r24, r12
     186:	86 d7       	rcall	.+3852   	; 0x1094 <UART1_Transmit>
				while(laptop_in != 33);
     188:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     18c:	81 32       	cpi	r24, 0x21	; 33
     18e:	e1 f7       	brne	.-8      	; 0x188 <send_matrix+0x3a>
				
				laptop_in = 0;
     190:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
				UART1_Transmit(x);
     194:	8d 2d       	mov	r24, r13
     196:	7e d7       	rcall	.+3836   	; 0x1094 <UART1_Transmit>
				while(laptop_in != 33);
     198:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     19c:	81 32       	cpi	r24, 0x21	; 33
     19e:	e1 f7       	brne	.-8      	; 0x198 <send_matrix+0x4a>
     1a0:	21 96       	adiw	r28, 0x01	; 1

void send_matrix()
{
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
     1a2:	c2 33       	cpi	r28, 0x32	; 50
     1a4:	d1 05       	cpc	r29, r1
     1a6:	19 f7       	brne	.-58     	; 0x16e <send_matrix+0x20>
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	e8 1a       	sub	r14, r24
     1ac:	f8 0a       	sbc	r15, r24
	sensor_in[11] = dir_dir;
}

void send_matrix()
{
	for (unsigned char y = 0; y < 25; ++y)
     1ae:	89 e1       	ldi	r24, 0x19	; 25
     1b0:	e8 16       	cp	r14, r24
     1b2:	f1 04       	cpc	r15, r1
     1b4:	59 f0       	breq	.+22     	; 0x1cc <send_matrix+0x7e>
     1b6:	ce 2c       	mov	r12, r14
	sensor_in[14] = direction;
	sensor_in[11] = dir_dir;
}

void send_matrix()
{
     1b8:	c0 e0       	ldi	r28, 0x00	; 0
     1ba:	d0 e0       	ldi	r29, 0x00	; 0
	for (unsigned char y = 0; y < 25; ++y)
	{
		for (unsigned char x = 0; x < 50; ++x)
		{
			if (matrix[y][x] == wall)
     1bc:	be 9c       	mul	r11, r14
     1be:	80 01       	movw	r16, r0
     1c0:	bf 9c       	mul	r11, r15
     1c2:	10 0d       	add	r17, r0
     1c4:	11 24       	eor	r1, r1
     1c6:	09 5d       	subi	r16, 0xD9	; 217
     1c8:	1e 4f       	sbci	r17, 0xFE	; 254
				UART1_Transmit(x);
				while(laptop_in != 33);
			}
		}
	}
	UART1_Transmit(0b11111111);
     1ca:	d1 cf       	rjmp	.-94     	; 0x16e <send_matrix+0x20>
     1cc:	8f ef       	ldi	r24, 0xFF	; 255
     1ce:	62 d7       	rcall	.+3780   	; 0x1094 <UART1_Transmit>
}
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	bf 90       	pop	r11
     1e2:	08 95       	ret

000001e4 <__vector_28>:
	laptop_in = 0;
	recieve_renewed = 0;
}

ISR(USART1_RX_vect) // tAR EMOT FR?N LAPTOP
{
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	8f 93       	push	r24
	laptop_in = UDR1;
     1f0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     1f4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <laptop_in>
	recieve_renewed = 1;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <recieve_renewed>
}
     1fe:	8f 91       	pop	r24
     200:	0f 90       	pop	r0
     202:	0f be       	out	0x3f, r0	; 63
     204:	0f 90       	pop	r0
     206:	1f 90       	pop	r1
     208:	18 95       	reti

0000020a <__vector_20>:

ISR(USART0_RX_vect)	// tAR EMOT FR?N SENSOR
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	0b b6       	in	r0, 0x3b	; 59
     216:	0f 92       	push	r0
     218:	8f 93       	push	r24
     21a:	9f 93       	push	r25
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
	New_sens = 0;
     220:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <New_sens>
	sensor_in[counter2] = UDR0;				// tar emot alla sensorv?rden efter vi har k?rt 40cm och l?gger in i sensorvectorn
     224:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <counter2>
     228:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <counter2+0x1>
     22c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     230:	e3 5f       	subi	r30, 0xF3	; 243
     232:	f9 4f       	sbci	r31, 0xF9	; 249
     234:	80 83       	st	Z, r24
	counter2 = counter2 + 1;
     236:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <counter2>
     23a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <counter2+0x1>
     23e:	01 96       	adiw	r24, 0x01	; 1
     240:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <counter2+0x1>
     244:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <counter2>
	if (counter2 == 10)
     248:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <counter2>
     24c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <counter2+0x1>
     250:	0a 97       	sbiw	r24, 0x0a	; 10
     252:	39 f4       	brne	.+14     	; 0x262 <__vector_20+0x58>
	{
		counter2 = 0;
     254:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <counter2+0x1>
     258:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter2>
		New_sens = 1;
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <New_sens>
	}
	
}
     262:	ff 91       	pop	r31
     264:	ef 91       	pop	r30
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	0f 90       	pop	r0
     26c:	0b be       	out	0x3b, r0	; 59
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <get_low_high>:

void get_low_high()
{
	low = sens_safe[6];
     278:	ee e1       	ldi	r30, 0x1E	; 30
     27a:	f6 e0       	ldi	r31, 0x06	; 6
     27c:	86 81       	ldd	r24, Z+6	; 0x06
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <low+0x1>
     284:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <low>
	high = sens_safe[7];
     288:	87 81       	ldd	r24, Z+7	; 0x07
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <high+0x1>
     290:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <high>
     294:	08 95       	ret

00000296 <get_ny_fram>:
}

void get_ny_fram()
{
	get_low_high();
     296:	f0 df       	rcall	.-32     	; 0x278 <get_low_high>
	ny_fram = (low + (high*256)); // tar nytt fram värde som vi jämför med gamla
     298:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <high>
     29c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <high+0x1>
     2a0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <low>
     2a4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <low+0x1>
     2a8:	98 2f       	mov	r25, r24
     2aa:	88 27       	eor	r24, r24
     2ac:	82 0f       	add	r24, r18
     2ae:	93 1f       	adc	r25, r19
     2b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <ny_fram+0x1>
     2b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <ny_fram>
     2b8:	08 95       	ret

000002ba <go_forward>:
	start_dist = ny_fram;
}

void go_forward() // tar nytt fram värde samt skickar kör fram signal och resetar roteratsignalen
{	
	if (first == 1)
     2ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <first>
     2be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <first+0x1>
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	31 f4       	brne	.+12     	; 0x2d2 <go_forward+0x18>
	{
		UART0_Transmit(forward);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	ed d6       	rcall	.+3546   	; 0x10a4 <UART0_Transmit>
		first = 0;
     2ca:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <first+0x1>
     2ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <first>
	}

	if ((sens_safe[0] < 20) && (sens_safe[1] < 20 ))
     2d2:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     2d6:	84 31       	cpi	r24, 0x14	; 20
     2d8:	60 f4       	brcc	.+24     	; 0x2f2 <go_forward+0x38>
     2da:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     2de:	84 31       	cpi	r24, 0x14	; 20
     2e0:	40 f4       	brcc	.+16     	; 0x2f2 <go_forward+0x38>
	{
		harRot = 0;
     2e2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
		first = 1;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <first+0x1>
     2ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <first>
     2f2:	08 95       	ret

000002f4 <baby_proof_and_update>:
	
}

void baby_proof_and_update() //safear sensorvärden, inte programkoder
{
	while(New_sens != 1); //Vänta på hel bytearray
     2f4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <New_sens>
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <baby_proof_and_update>
	cli();
     2fc:	f8 94       	cli
		for(int i=0; i<8;i++)
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
		{
			sens_safe[i] = sensor_in[i];
     302:	fc 01       	movw	r30, r24
     304:	e3 5f       	subi	r30, 0xF3	; 243
     306:	f9 4f       	sbci	r31, 0xF9	; 249
     308:	20 81       	ld	r18, Z
     30a:	fc 01       	movw	r30, r24
     30c:	e2 5e       	subi	r30, 0xE2	; 226
     30e:	f9 4f       	sbci	r31, 0xF9	; 249
     310:	20 83       	st	Z, r18

void baby_proof_and_update() //safear sensorvärden, inte programkoder
{
	while(New_sens != 1); //Vänta på hel bytearray
	cli();
		for(int i=0; i<8;i++)
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	88 30       	cpi	r24, 0x08	; 8
     316:	91 05       	cpc	r25, r1
     318:	a1 f7       	brne	.-24     	; 0x302 <baby_proof_and_update+0xe>
		{
			sens_safe[i] = sensor_in[i];
		}
	sei();
     31a:	78 94       	sei
	get_ny_fram();
     31c:	bc cf       	rjmp	.-136    	; 0x296 <get_ny_fram>
     31e:	08 95       	ret

00000320 <send_to_laptop>:
	}
	UART1_Transmit(0b11111111);
}

void send_to_laptop() //inte kalla för tätt
{
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
	baby_proof_and_update();
     324:	e7 df       	rcall	.-50     	; 0x2f4 <baby_proof_and_update>
	sensor_in[10] = KokFarFarAway;
     326:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     32a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     32e:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <sensor_in+0xa>
	for(int i = 0; i < 8 ; ++i)
     332:	c0 e0       	ldi	r28, 0x00	; 0
     334:	d0 e0       	ldi	r29, 0x00	; 0
	{
		laptop_in = 0;
     336:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
		UART1_Transmit(sens_safe[i]);
     33a:	fe 01       	movw	r30, r28
     33c:	e2 5e       	subi	r30, 0xE2	; 226
     33e:	f9 4f       	sbci	r31, 0xF9	; 249
     340:	80 81       	ld	r24, Z
     342:	a8 d6       	rcall	.+3408   	; 0x1094 <UART1_Transmit>
		while(laptop_in != 33);
     344:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     348:	81 32       	cpi	r24, 0x21	; 33
     34a:	e1 f7       	brne	.-8      	; 0x344 <send_to_laptop+0x24>

void send_to_laptop() //inte kalla för tätt
{
	baby_proof_and_update();
	sensor_in[10] = KokFarFarAway;
	for(int i = 0; i < 8 ; ++i)
     34c:	21 96       	adiw	r28, 0x01	; 1
     34e:	c8 30       	cpi	r28, 0x08	; 8
     350:	d1 05       	cpc	r29, r1
     352:	89 f7       	brne	.-30     	; 0x336 <send_to_laptop+0x16>
     354:	c8 e0       	ldi	r28, 0x08	; 8
     356:	d0 e0       	ldi	r29, 0x00	; 0
		UART1_Transmit(sens_safe[i]);
		while(laptop_in != 33);
	}
	for(int i = 8; i < 15; ++i)
	{
		laptop_in = 0;
     358:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
		UART1_Transmit(sensor_in[i]);
     35c:	fe 01       	movw	r30, r28
     35e:	e3 5f       	subi	r30, 0xF3	; 243
     360:	f9 4f       	sbci	r31, 0xF9	; 249
     362:	80 81       	ld	r24, Z
     364:	97 d6       	rcall	.+3374   	; 0x1094 <UART1_Transmit>
		while(laptop_in != 33);
     366:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     36a:	81 32       	cpi	r24, 0x21	; 33
     36c:	e1 f7       	brne	.-8      	; 0x366 <send_to_laptop+0x46>
	{
		laptop_in = 0;
		UART1_Transmit(sens_safe[i]);
		while(laptop_in != 33);
	}
	for(int i = 8; i < 15; ++i)
     36e:	21 96       	adiw	r28, 0x01	; 1
     370:	cf 30       	cpi	r28, 0x0F	; 15
     372:	d1 05       	cpc	r29, r1
     374:	89 f7       	brne	.-30     	; 0x358 <send_to_laptop+0x38>
	{
		laptop_in = 0;
		UART1_Transmit(sensor_in[i]);
		while(laptop_in != 33);
	}
	laptop_in = 0;
     376:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <laptop_in>
	recieve_renewed = 0;
     37a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <recieve_renewed>
}
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <handle_incoming_data>:
	kolla_efter_kok_left();
	
}
void handle_incoming_data()
{
	switch(laptop_in)
     384:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
     388:	80 31       	cpi	r24, 0x10	; 16
     38a:	a1 f0       	breq	.+40     	; 0x3b4 <handle_incoming_data+0x30>
     38c:	80 33       	cpi	r24, 0x30	; 48
     38e:	d1 f0       	breq	.+52     	; 0x3c4 <handle_incoming_data+0x40>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	f1 f4       	brne	.+60     	; 0x3d0 <handle_incoming_data+0x4c>
	{
		case forward:
			AUTO = 1;
     394:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <AUTO>
			MANUELL = 0;
     398:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <MANUELL>
			baby_proof_and_update();
     39c:	ab df       	rcall	.-170    	; 0x2f4 <baby_proof_and_update>
			start_dist = ny_fram;
     39e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     3a2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     3a6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     3aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
			UART0_Transmit(forward);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	79 d6       	rcall	.+3314   	; 0x10a4 <UART0_Transmit>
			
		break;
     3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <handle_incoming_data+0x4c>
		
		case man:
			AUTO = 0;
     3b4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
			MANUELL = 1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			UART0_Transmit(stop);
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	71 d6       	rcall	.+3298   	; 0x10a4 <UART0_Transmit>
		break;
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <handle_incoming_data+0x4c>
		
		case 0b00110000:
			AUTO = 0;
     3c4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
			MANUELL = 1;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			send_matrix();
     3ce:	bf de       	rcall	.-642    	; 0x14e <send_matrix>
		break;	
		
		default:
		break;		
	}
	recieve_renewed = 0;
     3d0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <recieve_renewed>
     3d4:	08 95       	ret

000003d6 <state1>:
	}
}

void state1()
{
		switch (direction)
     3d6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     3da:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	91 05       	cpc	r25, r1
     3e2:	b9 f1       	breq	.+110    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3e4:	1c f4       	brge	.+6      	; 0x3ec <state1+0x16>
     3e6:	89 2b       	or	r24, r25
     3e8:	49 f0       	breq	.+18     	; 0x3fc <state1+0x26>
     3ea:	08 95       	ret
     3ec:	82 30       	cpi	r24, 0x02	; 2
     3ee:	91 05       	cpc	r25, r1
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <state1+0x1e>
     3f2:	62 c0       	rjmp	.+196    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     3f4:	03 97       	sbiw	r24, 0x03	; 3
     3f6:	09 f4       	brne	.+2      	; 0x3fa <state1+0x24>
     3f8:	8a c0       	rjmp	.+276    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     3fa:	08 95       	ret
		{
			case 0: //norr
			bot_y = (bot_y + 1); // uppdaterar robotens position
     3fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     400:	8f 5f       	subi	r24, 0xFF	; 255
     402:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
			
			if (matrix[bot_y][(bot_x + 1)] == unknown) // kollar åt höger
     406:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     40a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	22 e3       	ldi	r18, 0x32	; 50
     412:	82 9f       	mul	r24, r18
     414:	e0 0d       	add	r30, r0
     416:	f1 1d       	adc	r31, r1
     418:	11 24       	eor	r1, r1
     41a:	e8 5d       	subi	r30, 0xD8	; 216
     41c:	fe 4f       	sbci	r31, 0xFE	; 254
     41e:	90 81       	ld	r25, Z
     420:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     424:	98 13       	cpse	r25, r24
     426:	a4 c0       	rjmp	.+328    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     428:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     42c:	88 32       	cpi	r24, 0x28	; 40
     42e:	08 f0       	brcs	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	9f c0       	rjmp	.+318    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
				{
					matrix[bot_y][(bot_x + 1)] = wall;
     432:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     436:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     440:	22 e3       	ldi	r18, 0x32	; 50
     442:	92 9f       	mul	r25, r18
     444:	e0 0d       	add	r30, r0
     446:	f1 1d       	adc	r31, r1
     448:	11 24       	eor	r1, r1
     44a:	e8 5d       	subi	r30, 0xD8	; 216
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	80 83       	st	Z, r24
     450:	08 95       	ret
				}
			}		
			break;
			
			case 1: //ÖST
			bot_x = (bot_x + 1);
     452:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			if (matrix[bot_y - 1][bot_x] == unknown) // kollar åt höger
     45c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     468:	32 e3       	ldi	r19, 0x32	; 50
     46a:	38 9f       	mul	r19, r24
     46c:	f0 01       	movw	r30, r0
     46e:	39 9f       	mul	r19, r25
     470:	f0 0d       	add	r31, r0
     472:	11 24       	eor	r1, r1
     474:	e9 5d       	subi	r30, 0xD9	; 217
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	e2 0f       	add	r30, r18
     47a:	f1 1d       	adc	r31, r1
     47c:	90 81       	ld	r25, Z
     47e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     482:	98 13       	cpse	r25, r24
     484:	75 c0       	rjmp	.+234    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     486:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     48a:	88 32       	cpi	r24, 0x28	; 40
     48c:	08 f0       	brcs	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	70 c0       	rjmp	.+224    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
				{
					matrix[bot_y - 1][bot_x] = wall;
     490:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     49c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     4a0:	42 e3       	ldi	r20, 0x32	; 50
     4a2:	48 9f       	mul	r20, r24
     4a4:	f0 01       	movw	r30, r0
     4a6:	49 9f       	mul	r20, r25
     4a8:	f0 0d       	add	r31, r0
     4aa:	11 24       	eor	r1, r1
     4ac:	e9 5d       	subi	r30, 0xD9	; 217
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	e3 0f       	add	r30, r19
     4b2:	f1 1d       	adc	r31, r1
     4b4:	20 83       	st	Z, r18
     4b6:	08 95       	ret
				}
			}		
			break;
			
			case 2:
			bot_y = (bot_y - 1);
     4b8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     4bc:	81 50       	subi	r24, 0x01	; 1
     4be:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
			if (matrix[bot_y][bot_x - 1] == unknown) // kollar åt höger
     4c2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     4c6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	92 e3       	ldi	r25, 0x32	; 50
     4ce:	89 9f       	mul	r24, r25
     4d0:	e0 0d       	add	r30, r0
     4d2:	f1 1d       	adc	r31, r1
     4d4:	11 24       	eor	r1, r1
     4d6:	ea 5d       	subi	r30, 0xDA	; 218
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	90 81       	ld	r25, Z
     4dc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     4e0:	98 13       	cpse	r25, r24
     4e2:	46 c0       	rjmp	.+140    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     4e4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     4e8:	88 32       	cpi	r24, 0x28	; 40
     4ea:	08 f0       	brcs	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	41 c0       	rjmp	.+130    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
				{
					matrix[bot_y][bot_x - 1] = wall;
     4ee:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     4f2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     4fc:	22 e3       	ldi	r18, 0x32	; 50
     4fe:	92 9f       	mul	r25, r18
     500:	e0 0d       	add	r30, r0
     502:	f1 1d       	adc	r31, r1
     504:	11 24       	eor	r1, r1
     506:	ea 5d       	subi	r30, 0xDA	; 218
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	80 83       	st	Z, r24
     50c:	08 95       	ret
				}
			}			
			break;
			
			case 3:
			bot_x = (bot_x - 1);
     50e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     512:	81 50       	subi	r24, 0x01	; 1
     514:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			if (matrix[bot_y + 1][bot_x] == unknown) // kollar åt höger
     518:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     524:	32 e3       	ldi	r19, 0x32	; 50
     526:	38 9f       	mul	r19, r24
     528:	f0 01       	movw	r30, r0
     52a:	39 9f       	mul	r19, r25
     52c:	f0 0d       	add	r31, r0
     52e:	11 24       	eor	r1, r1
     530:	e9 5d       	subi	r30, 0xD9	; 217
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	e2 0f       	add	r30, r18
     536:	f1 1d       	adc	r31, r1
     538:	90 81       	ld	r25, Z
     53a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     53e:	98 13       	cpse	r25, r24
     540:	17 c0       	rjmp	.+46     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			{
				if (sens_safe[4] < 40) // uppdaterar matrisen om det är vägg på höger sida
     542:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     546:	88 32       	cpi	r24, 0x28	; 40
     548:	98 f4       	brcc	.+38     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
				{
					matrix[bot_y + 1][bot_x] = wall;
     54a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	01 96       	adiw	r24, 0x01	; 1
     552:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     556:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     55a:	42 e3       	ldi	r20, 0x32	; 50
     55c:	48 9f       	mul	r20, r24
     55e:	f0 01       	movw	r30, r0
     560:	49 9f       	mul	r20, r25
     562:	f0 0d       	add	r31, r0
     564:	11 24       	eor	r1, r1
     566:	e9 5d       	subi	r30, 0xD9	; 217
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	e3 0f       	add	r30, r19
     56c:	f1 1d       	adc	r31, r1
     56e:	20 83       	st	Z, r18
     570:	08 95       	ret

00000572 <update_position>:
}

void update_position() // gör switch case senare
{
	
	stop_dist = 15;
     572:	8f e0       	ldi	r24, 0x0F	; 15
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     57a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	get_ny_fram();
     57e:	8b de       	rcall	.-746    	; 0x296 <get_ny_fram>
	state1();
     580:	2a df       	rcall	.-428    	; 0x3d6 <state1>
     582:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <bot_y>
	matrix[bot_y][bot_x] = drive;
     586:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <bot_x>
     58a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     58e:	22 e3       	ldi	r18, 0x32	; 50
     590:	e2 9f       	mul	r30, r18
     592:	f0 01       	movw	r30, r0
     594:	11 24       	eor	r1, r1
     596:	e9 5d       	subi	r30, 0xD9	; 217
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	e9 0f       	add	r30, r25
     59c:	f1 1d       	adc	r31, r1
     59e:	80 83       	st	Z, r24
     5a0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
	sensor_in[12] = (unsigned char)bot_y;
     5a4:	ed e0       	ldi	r30, 0x0D	; 13
     5a6:	f6 e0       	ldi	r31, 0x06	; 6
     5a8:	84 87       	std	Z+12, r24	; 0x0c
     5aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
	sensor_in[13] = (unsigned char)bot_x;
     5ae:	85 87       	std	Z+13, r24	; 0x0d
     5b0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
	
if (state == 0)
     5b4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     5b8:	89 2b       	or	r24, r25
     5ba:	31 f4       	brne	.+12     	; 0x5c8 <update_position+0x56>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
{
	state = 1;
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     5c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     5c8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
}
	if ((state == 1) && (KorKok == 1) && (bot_x == kokStart_x) && (kokStart_y == bot_y)){
     5cc:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	d1 f4       	brne	.+52     	; 0x608 <update_position+0x96>
     5d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <KorKok>
     5d8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <KorKok+0x1>
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	a1 f4       	brne	.+40     	; 0x608 <update_position+0x96>
     5e0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <bot_x>
     5e4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <kokStart_x>
     5e8:	98 13       	cpse	r25, r24
     5ea:	0e c0       	rjmp	.+28     	; 0x608 <update_position+0x96>
     5ec:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <kokStart_y>
     5f0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     5f4:	98 13       	cpse	r25, r24
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <update_position+0x96>
     5f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <KorKok+0x1>
		KorKok = 0;
     5fc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <KorKok>
		go_home();
     600:	a9 d1       	rcall	.+850    	; 0x954 <go_home>
		UART0_Transmit(stop);
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	4f c5       	rjmp	.+2718   	; 0x10a4 <UART0_Transmit>
     606:	08 95       	ret
     608:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
// 		MANUELL = 1;
// 		AUTO = 0;
	}
	else if ((state == 1) && (bot_y == 0) && (bot_x == 25))
     60c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	09 f5       	brne	.+66     	; 0x656 <update_position+0xe4>
     614:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     618:	81 11       	cpse	r24, r1
     61a:	1d c0       	rjmp	.+58     	; 0x656 <update_position+0xe4>
     61c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     620:	89 31       	cpi	r24, 0x19	; 25
     622:	c9 f4       	brne	.+50     	; 0x656 <update_position+0xe4>
     624:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <KokKlart>
	{
		if (KokKlart == 1)
     628:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <KokKlart+0x1>
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	69 f4       	brne	.+26     	; 0x64a <update_position+0xd8>
     630:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
		{
			driven = 0;
     634:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
			rot_left();
     638:	44 d0       	rcall	.+136    	; 0x6c2 <rot_left>
     63a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <AUTO>
 			AUTO = 0;
 			MANUELL = 1;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <MANUELL>
			UART0_Transmit(stop);
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	2e c5       	rjmp	.+2652   	; 0x10a4 <UART0_Transmit>
     648:	08 95       	ret
     64a:	82 e0       	ldi	r24, 0x02	; 2
		}
		else
			state = 2;
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     652:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     656:	08 95       	ret

00000658 <rot_right>:
     658:	80 e0       	ldi	r24, 0x00	; 0
	ny_fram = (low + (high*256)); // tar nytt fram värde som vi jämför med gamla
}

void rot_right() // rotera höger och väntar till den är klar
{	
	UART0_Transmit(stop);
     65a:	24 d5       	rcall	.+2632   	; 0x10a4 <UART0_Transmit>
		if (driven >= 13)
     65c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     660:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     664:	0d 97       	sbiw	r24, 0x0d	; 13
		{
			update_position();
     666:	28 f0       	brcs	.+10     	; 0x672 <rot_right+0x1a>
     668:	84 df       	rcall	.-248    	; 0x572 <update_position>
			driven = 0;
     66a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     66e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
		}
	harRot = 1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <harRot>
	UART0_Transmit(rotate_right);
     678:	88 e0       	ldi	r24, 0x08	; 8
     67a:	14 d5       	rcall	.+2600   	; 0x10a4 <UART0_Transmit>
	sensor_in[8] = 'O';
     67c:	ed e0       	ldi	r30, 0x0D	; 13
     67e:	f6 e0       	ldi	r31, 0x06	; 6
     680:	8f e4       	ldi	r24, 0x4F	; 79
     682:	80 87       	std	Z+8, r24	; 0x08
	sensor_in[10] = 'R'; //com kod
     684:	82 e5       	ldi	r24, 0x52	; 82
     686:	82 87       	std	Z+10, r24	; 0x0a
	while (sensor_in[8] != klar);
     688:	80 85       	ldd	r24, Z+8	; 0x08
     68a:	84 34       	cpi	r24, 0x44	; 68
	
	UART0_Transmit(stop);
     68c:	e9 f7       	brne	.-6      	; 0x688 <rot_right+0x30>
     68e:	80 e0       	ldi	r24, 0x00	; 0
	update_direction(0);
     690:	09 d5       	rcall	.+2578   	; 0x10a4 <UART0_Transmit>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	20 dd       	rcall	.-1472   	; 0xd8 <update_direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	2f ef       	ldi	r18, 0xFF	; 255
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	98 e0       	ldi	r25, 0x08	; 8
     69e:	21 50       	subi	r18, 0x01	; 1
     6a0:	80 40       	sbci	r24, 0x00	; 0
     6a2:	90 40       	sbci	r25, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <rot_right+0x46>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <rot_right+0x50>
	_delay_ms(200); //låt den stanna och få in nya lidarvärdet framåt
	
	send_to_laptop(); //uppdaterar ny fram också
     6a8:	00 00       	nop
     6aa:	3a de       	rcall	.-908    	; 0x320 <send_to_laptop>
	start_dist = ny_fram;
     6ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     6b0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     6b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     6b8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
	UART0_Transmit(forward);	
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	f2 c4       	rjmp	.+2532   	; 0x10a4 <UART0_Transmit>
     6c0:	08 95       	ret

000006c2 <rot_left>:
}

void rot_left() // rotera vänster och väntar till den är klar
{
	UART0_Transmit(stop);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	ef d4       	rcall	.+2526   	; 0x10a4 <UART0_Transmit>
		if (driven >= 13)
     6c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     6ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     6ce:	0d 97       	sbiw	r24, 0x0d	; 13
		{
			update_position();
     6d0:	28 f0       	brcs	.+10     	; 0x6dc <rot_left+0x1a>
     6d2:	4f df       	rcall	.-354    	; 0x572 <update_position>
			driven = 0;
     6d4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     6d8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
		}
	harRot = 1;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <harRot>
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	9f e8       	ldi	r25, 0x8F	; 143
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <rot_left+0x24>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <rot_left+0x2a>
	_delay_ms(10);
	UART0_Transmit(rotate_left);
     6ec:	00 00       	nop
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	d9 d4       	rcall	.+2482   	; 0x10a4 <UART0_Transmit>

	sensor_in[8] = 'O';
     6f2:	ed e0       	ldi	r30, 0x0D	; 13
     6f4:	f6 e0       	ldi	r31, 0x06	; 6
     6f6:	8f e4       	ldi	r24, 0x4F	; 79
     6f8:	80 87       	std	Z+8, r24	; 0x08
	sensor_in[10] = 'L'; //com kod
     6fa:	8c e4       	ldi	r24, 0x4C	; 76
     6fc:	82 87       	std	Z+10, r24	; 0x0a
	while (sensor_in[8] != klar);
     6fe:	80 85       	ldd	r24, Z+8	; 0x08
     700:	84 34       	cpi	r24, 0x44	; 68

	UART0_Transmit(stop);
     702:	e9 f7       	brne	.-6      	; 0x6fe <rot_left+0x3c>
     704:	80 e0       	ldi	r24, 0x00	; 0
	update_direction(1);
     706:	ce d4       	rcall	.+2460   	; 0x10a4 <UART0_Transmit>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	e5 dc       	rcall	.-1590   	; 0xd8 <update_direction>
     70e:	9f ef       	ldi	r25, 0xFF	; 255
     710:	2f ef       	ldi	r18, 0xFF	; 255
     712:	88 e0       	ldi	r24, 0x08	; 8
     714:	91 50       	subi	r25, 0x01	; 1
     716:	20 40       	sbci	r18, 0x00	; 0
     718:	80 40       	sbci	r24, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <rot_left+0x52>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <rot_left+0x5c>
     71e:	00 00       	nop
	_delay_ms(200); //låt lidarn mäta när rotten stannat
	
	switch(direction)
     720:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     724:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     728:	81 30       	cpi	r24, 0x01	; 1
     72a:	91 05       	cpc	r25, r1
     72c:	99 f1       	breq	.+102    	; 0x794 <rot_left+0xd2>
     72e:	1c f4       	brge	.+6      	; 0x736 <rot_left+0x74>
     730:	89 2b       	or	r24, r25
     732:	49 f0       	breq	.+18     	; 0x746 <rot_left+0x84>
     734:	b0 c0       	rjmp	.+352    	; 0x896 <rot_left+0x1d4>
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	91 05       	cpc	r25, r1
     73a:	09 f4       	brne	.+2      	; 0x73e <rot_left+0x7c>
     73c:	5a c0       	rjmp	.+180    	; 0x7f2 <rot_left+0x130>
     73e:	03 97       	sbiw	r24, 0x03	; 3
     740:	09 f4       	brne	.+2      	; 0x744 <rot_left+0x82>
     742:	7d c0       	rjmp	.+250    	; 0x83e <rot_left+0x17c>
     744:	a8 c0       	rjmp	.+336    	; 0x896 <rot_left+0x1d4>
	{
	case 0:
	if ((sens_safe[4] < 40) && matrix[bot_y][bot_x + 1] != drive )
     746:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     74a:	88 32       	cpi	r24, 0x28	; 40
     74c:	08 f0       	brcs	.+2      	; 0x750 <rot_left+0x8e>
     74e:	a3 c0       	rjmp	.+326    	; 0x896 <rot_left+0x1d4>
     750:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     754:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	92 e3       	ldi	r25, 0x32	; 50
     75c:	89 9f       	mul	r24, r25
     75e:	e0 0d       	add	r30, r0
     760:	f1 1d       	adc	r31, r1
     762:	11 24       	eor	r1, r1
     764:	e8 5d       	subi	r30, 0xD8	; 216
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	90 81       	ld	r25, Z
     76a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     76e:	98 17       	cp	r25, r24
     770:	09 f4       	brne	.+2      	; 0x774 <rot_left+0xb2>
     772:	91 c0       	rjmp	.+290    	; 0x896 <rot_left+0x1d4>
		matrix[bot_y][bot_x + 1] = wall;
     774:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     778:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     782:	22 e3       	ldi	r18, 0x32	; 50
     784:	92 9f       	mul	r25, r18
     786:	e0 0d       	add	r30, r0
     788:	f1 1d       	adc	r31, r1
     78a:	11 24       	eor	r1, r1
     78c:	e8 5d       	subi	r30, 0xD8	; 216
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	80 83       	st	Z, r24
     792:	81 c0       	rjmp	.+258    	; 0x896 <rot_left+0x1d4>
	break;
	case 1:
	if ((sens_safe[4] < 40) && matrix[bot_y - 1][bot_x] != drive)
     794:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     798:	88 32       	cpi	r24, 0x28	; 40
     79a:	08 f0       	brcs	.+2      	; 0x79e <rot_left+0xdc>
     79c:	7c c0       	rjmp	.+248    	; 0x896 <rot_left+0x1d4>
     79e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     7aa:	32 e3       	ldi	r19, 0x32	; 50
     7ac:	38 9f       	mul	r19, r24
     7ae:	f0 01       	movw	r30, r0
     7b0:	39 9f       	mul	r19, r25
     7b2:	f0 0d       	add	r31, r0
     7b4:	11 24       	eor	r1, r1
     7b6:	e9 5d       	subi	r30, 0xD9	; 217
     7b8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ba:	e2 0f       	add	r30, r18
     7bc:	f1 1d       	adc	r31, r1
     7be:	90 81       	ld	r25, Z
     7c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     7c4:	98 17       	cp	r25, r24
     7c6:	09 f4       	brne	.+2      	; 0x7ca <rot_left+0x108>
     7c8:	66 c0       	rjmp	.+204    	; 0x896 <rot_left+0x1d4>
		matrix[bot_y - 1][bot_x] = wall;
     7ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     7d6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     7da:	42 e3       	ldi	r20, 0x32	; 50
     7dc:	48 9f       	mul	r20, r24
     7de:	f0 01       	movw	r30, r0
     7e0:	49 9f       	mul	r20, r25
     7e2:	f0 0d       	add	r31, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	e9 5d       	subi	r30, 0xD9	; 217
     7e8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ea:	e3 0f       	add	r30, r19
     7ec:	f1 1d       	adc	r31, r1
     7ee:	20 83       	st	Z, r18
     7f0:	52 c0       	rjmp	.+164    	; 0x896 <rot_left+0x1d4>
	break;
	case 2:
	if ((sens_safe[4] < 40) && matrix[bot_y][bot_x - 1] != drive)
     7f2:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     7f6:	88 32       	cpi	r24, 0x28	; 40
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <rot_left+0x13a>
     7fa:	4d c0       	rjmp	.+154    	; 0x896 <rot_left+0x1d4>
     7fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     800:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	92 e3       	ldi	r25, 0x32	; 50
     808:	89 9f       	mul	r24, r25
     80a:	e0 0d       	add	r30, r0
     80c:	f1 1d       	adc	r31, r1
     80e:	11 24       	eor	r1, r1
     810:	ea 5d       	subi	r30, 0xDA	; 218
     812:	fe 4f       	sbci	r31, 0xFE	; 254
     814:	90 81       	ld	r25, Z
     816:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     81a:	98 17       	cp	r25, r24
     81c:	e1 f1       	breq	.+120    	; 0x896 <rot_left+0x1d4>
		matrix[bot_y][bot_x - 1] = wall;
     81e:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     822:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     82c:	22 e3       	ldi	r18, 0x32	; 50
     82e:	92 9f       	mul	r25, r18
     830:	e0 0d       	add	r30, r0
     832:	f1 1d       	adc	r31, r1
     834:	11 24       	eor	r1, r1
     836:	ea 5d       	subi	r30, 0xDA	; 218
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	80 83       	st	Z, r24
     83c:	2c c0       	rjmp	.+88     	; 0x896 <rot_left+0x1d4>
	break;
	case 3:
	if ((sens_safe[4] < 40) && matrix[bot_y + 1][bot_x] != drive)
     83e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     842:	88 32       	cpi	r24, 0x28	; 40
     844:	40 f5       	brcc	.+80     	; 0x896 <rot_left+0x1d4>
     846:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     852:	32 e3       	ldi	r19, 0x32	; 50
     854:	38 9f       	mul	r19, r24
     856:	f0 01       	movw	r30, r0
     858:	39 9f       	mul	r19, r25
     85a:	f0 0d       	add	r31, r0
     85c:	11 24       	eor	r1, r1
     85e:	e9 5d       	subi	r30, 0xD9	; 217
     860:	fe 4f       	sbci	r31, 0xFE	; 254
     862:	e2 0f       	add	r30, r18
     864:	f1 1d       	adc	r31, r1
     866:	90 81       	ld	r25, Z
     868:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     86c:	98 17       	cp	r25, r24
     86e:	99 f0       	breq	.+38     	; 0x896 <rot_left+0x1d4>
		matrix[bot_y + 1][bot_x] = wall;
     870:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     87c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     880:	42 e3       	ldi	r20, 0x32	; 50
     882:	48 9f       	mul	r20, r24
     884:	f0 01       	movw	r30, r0
     886:	49 9f       	mul	r20, r25
     888:	f0 0d       	add	r31, r0
     88a:	11 24       	eor	r1, r1
     88c:	e9 5d       	subi	r30, 0xD9	; 217
     88e:	fe 4f       	sbci	r31, 0xFE	; 254
     890:	e3 0f       	add	r30, r19
     892:	f1 1d       	adc	r31, r1
	break;
	}
	
	send_to_laptop();
     894:	20 83       	st	Z, r18
     896:	44 dd       	rcall	.-1400   	; 0x320 <send_to_laptop>
	start_dist = ny_fram;
     898:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     89c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     8a0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     8a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
     8a8:	08 95       	ret

000008aa <kokHittad>:
	}
	recieve_renewed = 0;
}

void kokHittad(){
	UART0_Transmit(forward); //kör fram till ö
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	fb d3       	rcall	.+2038   	; 0x10a4 <UART0_Transmit>
	do
	{
		baby_proof_and_update();
     8ae:	22 dd       	rcall	.-1468   	; 0x2f4 <baby_proof_and_update>
     8b0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
	}while(ny_fram > 12);
     8b4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     8b8:	0d 97       	sbiw	r24, 0x0d	; 13
     8ba:	c8 f7       	brcc	.-14     	; 0x8ae <kokHittad+0x4>
	
	UART0_Transmit(stop);
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	f2 d3       	rcall	.+2020   	; 0x10a4 <UART0_Transmit>
     8c0:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
	harRot = 0;
     8c4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
	driven = 0;
     8c8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     8cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
	
	if (KokFarFarAway == 1)
     8d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	41 f5       	brne	.+80     	; 0x928 <kokHittad+0x7e>
     8d8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
	{
		switch (direction)
     8dc:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	91 05       	cpc	r25, r1
     8e4:	81 f0       	breq	.+32     	; 0x906 <kokHittad+0x5c>
     8e6:	1c f4       	brge	.+6      	; 0x8ee <kokHittad+0x44>
     8e8:	89 2b       	or	r24, r25
     8ea:	39 f0       	breq	.+14     	; 0x8fa <kokHittad+0x50>
     8ec:	1d c0       	rjmp	.+58     	; 0x928 <kokHittad+0x7e>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	91 05       	cpc	r25, r1
     8f2:	79 f0       	breq	.+30     	; 0x912 <kokHittad+0x68>
     8f4:	03 97       	sbiw	r24, 0x03	; 3
     8f6:	99 f0       	breq	.+38     	; 0x91e <kokHittad+0x74>
     8f8:	17 c0       	rjmp	.+46     	; 0x928 <kokHittad+0x7e>
     8fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
		{
			case 0:
				bot_y = bot_y + 1;
     8fe:	8f 5f       	subi	r24, 0xFF	; 255
     900:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
     904:	11 c0       	rjmp	.+34     	; 0x928 <kokHittad+0x7e>
			break;
     906:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
			case 1:
				bot_x = bot_x + 1;
     90a:	8f 5f       	subi	r24, 0xFF	; 255
     90c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
     910:	0b c0       	rjmp	.+22     	; 0x928 <kokHittad+0x7e>
			break;
     912:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			case 2:
				bot_y = bot_y - 1;
     916:	81 50       	subi	r24, 0x01	; 1
     918:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
     91c:	05 c0       	rjmp	.+10     	; 0x928 <kokHittad+0x7e>
			break;
     91e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
			case 3:
				bot_x = bot_x - 1;
     922:	81 50       	subi	r24, 0x01	; 1
     924:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
			break;
		}
	 //rotera vänster
	}
	rot_left();
     928:	cc de       	rcall	.-616    	; 0x6c2 <rot_left>
     92a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
	kokStart_x = bot_x;
     92e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <kokStart_x>
     932:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
	kokStart_y = bot_y;
     936:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <kokStart_y>
	UART0_Transmit(stop);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	b3 d3       	rcall	.+1894   	; 0x10a4 <UART0_Transmit>
     93e:	81 e0       	ldi	r24, 0x01	; 1
	state = 1;
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     946:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     94a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <KorKok+0x1>
	KorKok = 1;
     94e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <KorKok>
     952:	08 95       	ret

00000954 <go_home>:
     954:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
	//kör runt som vanligt till position
}

void go_home()
{
	driven = 0;
     958:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	rot_left();
     95c:	b2 de       	rcall	.-668    	; 0x6c2 <rot_left>
	UART0_Transmit(forward); //kör fram till ö
     95e:	81 e0       	ldi	r24, 0x01	; 1
	do
	{
		baby_proof_and_update();
     960:	a1 d3       	rcall	.+1858   	; 0x10a4 <UART0_Transmit>
     962:	c8 dc       	rcall	.-1648   	; 0x2f4 <baby_proof_and_update>
	}while(ny_fram > 13);
     964:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     968:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     96c:	0e 97       	sbiw	r24, 0x0e	; 14
	
	UART0_Transmit(stop);
     96e:	c8 f7       	brcc	.-14     	; 0x962 <go_home+0xe>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	98 d3       	rcall	.+1840   	; 0x10a4 <UART0_Transmit>
	harRot = 0;
     974:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <harRot>
	driven = 0;
     978:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     97c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	if (KokFarFarAway == 1)
     980:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
     984:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	59 f5       	brne	.+86     	; 0x9e2 <go_home+0x8e>
	{
		sensor_in[15] = 10;
     98c:	8a e0       	ldi	r24, 0x0A	; 10
     98e:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <control_signal>
		switch (direction)
     992:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     996:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	91 05       	cpc	r25, r1
     99e:	81 f0       	breq	.+32     	; 0x9c0 <go_home+0x6c>
     9a0:	1c f4       	brge	.+6      	; 0x9a8 <go_home+0x54>
     9a2:	89 2b       	or	r24, r25
     9a4:	39 f0       	breq	.+14     	; 0x9b4 <go_home+0x60>
     9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <go_home+0x8e>
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	91 05       	cpc	r25, r1
     9ac:	79 f0       	breq	.+30     	; 0x9cc <go_home+0x78>
     9ae:	03 97       	sbiw	r24, 0x03	; 3
     9b0:	99 f0       	breq	.+38     	; 0x9d8 <go_home+0x84>
     9b2:	17 c0       	rjmp	.+46     	; 0x9e2 <go_home+0x8e>
			{
				// om kört 80 cm,
				case 0:
				bot_y = (bot_y + 1);
     9b4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
				break;
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <go_home+0x8e>
				case 1:
				bot_x = (bot_x + 1);
     9c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
				break;
     9ca:	0b c0       	rjmp	.+22     	; 0x9e2 <go_home+0x8e>
				case 2:
				bot_y = (bot_y - 1);
     9cc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     9d0:	81 50       	subi	r24, 0x01	; 1
     9d2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <bot_y>
				break;
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <go_home+0x8e>
				case 3:
				bot_x = (bot_x - 1);
     9d8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bot_x>
     9dc:	81 50       	subi	r24, 0x01	; 1
     9de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <bot_x>
				break;
			}
	 //rotera vänster
	}
	rot_left();
     9e2:	6f de       	rcall	.-802    	; 0x6c2 <rot_left>
	state = 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     9ec:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
	KokKlart = 1;
     9f0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <KokKlart+0x1>
     9f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <KokKlart>
     9f8:	08 95       	ret

000009fa <kolla_efter_kok_left>:
}

void kolla_efter_kok_left()
{

	baby_proof_and_update();
     9fa:	7c dc       	rcall	.-1800   	; 0x2f4 <baby_proof_and_update>
	switch (direction)
     9fc:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <direction>
     a00:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <direction+0x1>
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	91 05       	cpc	r25, r1
     a08:	09 f4       	brne	.+2      	; 0xa0c <kolla_efter_kok_left+0x12>
     a0a:	ae c0       	rjmp	.+348    	; 0xb68 <kolla_efter_kok_left+0x16e>
     a0c:	1c f4       	brge	.+6      	; 0xa14 <kolla_efter_kok_left+0x1a>
     a0e:	89 2b       	or	r24, r25
     a10:	49 f0       	breq	.+18     	; 0xa24 <kolla_efter_kok_left+0x2a>
     a12:	08 95       	ret
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	91 05       	cpc	r25, r1
     a18:	09 f4       	brne	.+2      	; 0xa1c <kolla_efter_kok_left+0x22>
     a1a:	55 c1       	rjmp	.+682    	; 0xcc6 <kolla_efter_kok_left+0x2cc>
     a1c:	03 97       	sbiw	r24, 0x03	; 3
     a1e:	09 f4       	brne	.+2      	; 0xa22 <kolla_efter_kok_left+0x28>
     a20:	ec c1       	rjmp	.+984    	; 0xdfa <kolla_efter_kok_left+0x400>
     a22:	08 95       	ret
	{
		case 0: //norr
		if (matrix[bot_y][bot_x - 1] == unknown || (matrix[bot_y][bot_x - 1] == drive))
     a24:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     a28:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	22 e3       	ldi	r18, 0x32	; 50
     a30:	82 9f       	mul	r24, r18
     a32:	e0 0d       	add	r30, r0
     a34:	f1 1d       	adc	r31, r1
     a36:	11 24       	eor	r1, r1
     a38:	ea 5d       	subi	r30, 0xDA	; 218
     a3a:	fe 4f       	sbci	r31, 0xFE	; 254
     a3c:	90 81       	ld	r25, Z
     a3e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     a42:	98 17       	cp	r25, r24
     a44:	89 f0       	breq	.+34     	; 0xa68 <kolla_efter_kok_left+0x6e>
     a46:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     a4a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	92 e3       	ldi	r25, 0x32	; 50
     a52:	89 9f       	mul	r24, r25
     a54:	e0 0d       	add	r30, r0
     a56:	f1 1d       	adc	r31, r1
     a58:	11 24       	eor	r1, r1
     a5a:	ea 5d       	subi	r30, 0xDA	; 218
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	90 81       	ld	r25, Z
     a60:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     a64:	98 13       	cpse	r25, r24
     a66:	72 c2       	rjmp	.+1252   	; 0xf4c <kolla_efter_kok_left+0x552>
		{
			if ((sens_safe[5] < 25 ) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) ) 
     a68:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     a6c:	89 31       	cpi	r24, 0x19	; 25
     a6e:	60 f5       	brcc	.+88     	; 0xac8 <kolla_efter_kok_left+0xce>
     a70:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     a74:	89 31       	cpi	r24, 0x19	; 25
     a76:	40 f5       	brcc	.+80     	; 0xac8 <kolla_efter_kok_left+0xce>
     a78:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     a7c:	84 31       	cpi	r24, 0x14	; 20
     a7e:	20 f5       	brcc	.+72     	; 0xac8 <kolla_efter_kok_left+0xce>
     a80:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     a84:	84 31       	cpi	r24, 0x14	; 20
     a86:	00 f5       	brcc	.+64     	; 0xac8 <kolla_efter_kok_left+0xce>
     a88:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     a8c:	84 31       	cpi	r24, 0x14	; 20
     a8e:	e0 f4       	brcc	.+56     	; 0xac8 <kolla_efter_kok_left+0xce>
			{	
				
				matrix[bot_y][bot_x - 1] = wall; // köksö hittad
     a90:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
     a94:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     a9e:	22 e3       	ldi	r18, 0x32	; 50
     aa0:	92 9f       	mul	r25, r18
     aa2:	e0 0d       	add	r30, r0
     aa4:	f1 1d       	adc	r31, r1
     aa6:	11 24       	eor	r1, r1
     aa8:	ea 5d       	subi	r30, 0xDA	; 218
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 83       	st	Z, r24
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     aae:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     ab0:	f9 d2       	rcall	.+1522   	; 0x10a4 <UART0_Transmit>
				UART0_Transmit(stop);
     ab2:	07 de       	rcall	.-1010   	; 0x6c2 <rot_left>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f6 d2       	rcall	.+1516   	; 0x10a4 <UART0_Transmit>
				kokHittad();
     ab8:	f8 de       	rcall	.-528    	; 0x8aa <kokHittad>
     aba:	81 e0       	ldi	r24, 0x01	; 1
				state = 1;
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <state+0x1>
     ac2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <state>
     ac6:	08 95       	ret
     ac8:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
			}
			else if((sens_safe[5] > 25 ) && (sens_safe[3] > 25) && (sens_safe[5] < 75) && (sens_safe[3] < 75) && (matrix[bot_y][bot_x - 2] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) )
     acc:	8a 31       	cpi	r24, 0x1A	; 26
     ace:	08 f4       	brcc	.+2      	; 0xad2 <kolla_efter_kok_left+0xd8>
     ad0:	3d c2       	rjmp	.+1146   	; 0xf4c <kolla_efter_kok_left+0x552>
     ad2:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     ad6:	8a 31       	cpi	r24, 0x1A	; 26
     ad8:	08 f4       	brcc	.+2      	; 0xadc <kolla_efter_kok_left+0xe2>
     ada:	38 c2       	rjmp	.+1136   	; 0xf4c <kolla_efter_kok_left+0x552>
     adc:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     ae0:	8b 34       	cpi	r24, 0x4B	; 75
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <kolla_efter_kok_left+0xec>
     ae4:	33 c2       	rjmp	.+1126   	; 0xf4c <kolla_efter_kok_left+0x552>
     ae6:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     aea:	8b 34       	cpi	r24, 0x4B	; 75
     aec:	08 f0       	brcs	.+2      	; 0xaf0 <kolla_efter_kok_left+0xf6>
     aee:	2e c2       	rjmp	.+1116   	; 0xf4c <kolla_efter_kok_left+0x552>
     af0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     af4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	92 e3       	ldi	r25, 0x32	; 50
     afc:	89 9f       	mul	r24, r25
     afe:	e0 0d       	add	r30, r0
     b00:	f1 1d       	adc	r31, r1
     b02:	11 24       	eor	r1, r1
     b04:	eb 5d       	subi	r30, 0xDB	; 219
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	90 81       	ld	r25, Z
     b0a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     b0e:	98 13       	cpse	r25, r24
     b10:	1d c2       	rjmp	.+1082   	; 0xf4c <kolla_efter_kok_left+0x552>
     b12:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     b16:	84 31       	cpi	r24, 0x14	; 20
     b18:	08 f0       	brcs	.+2      	; 0xb1c <kolla_efter_kok_left+0x122>
     b1a:	18 c2       	rjmp	.+1072   	; 0xf4c <kolla_efter_kok_left+0x552>
     b1c:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     b20:	84 31       	cpi	r24, 0x14	; 20
     b22:	08 f0       	brcs	.+2      	; 0xb26 <kolla_efter_kok_left+0x12c>
     b24:	13 c2       	rjmp	.+1062   	; 0xf4c <kolla_efter_kok_left+0x552>
     b26:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     b2a:	84 31       	cpi	r24, 0x14	; 20
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <kolla_efter_kok_left+0x136>
     b2e:	0e c2       	rjmp	.+1052   	; 0xf4c <kolla_efter_kok_left+0x552>
     b30:	81 e0       	ldi	r24, 0x01	; 1
			{
				KokFarFarAway = 1;
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     b38:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     b3c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
				
				matrix[bot_y][bot_x - 2] = wall; // köksö hittad
     b40:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     b4a:	22 e3       	ldi	r18, 0x32	; 50
     b4c:	92 9f       	mul	r25, r18
     b4e:	e0 0d       	add	r30, r0
     b50:	f1 1d       	adc	r31, r1
     b52:	11 24       	eor	r1, r1
     b54:	eb 5d       	subi	r30, 0xDB	; 219
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     b58:	80 83       	st	Z, r24
     b5a:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     b5c:	a3 d2       	rcall	.+1350   	; 0x10a4 <UART0_Transmit>
     b5e:	b1 dd       	rcall	.-1182   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	a0 d2       	rcall	.+1344   	; 0x10a4 <UART0_Transmit>
     b64:	a2 ce       	rjmp	.-700    	; 0x8aa <kokHittad>
				kokHittad();
     b66:	08 95       	ret
     b68:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			}
		}
		break;
		
		case 1: //ÖST
		if (matrix[bot_y + 1][bot_x] == unknown || (matrix[bot_y + 1][bot_x] == drive))
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     b74:	32 e3       	ldi	r19, 0x32	; 50
     b76:	38 9f       	mul	r19, r24
     b78:	f0 01       	movw	r30, r0
     b7a:	39 9f       	mul	r19, r25
     b7c:	f0 0d       	add	r31, r0
     b7e:	11 24       	eor	r1, r1
     b80:	e9 5d       	subi	r30, 0xD9	; 217
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	e2 0f       	add	r30, r18
     b86:	f1 1d       	adc	r31, r1
     b88:	90 81       	ld	r25, Z
     b8a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     b8e:	98 17       	cp	r25, r24
     b90:	a1 f0       	breq	.+40     	; 0xbba <kolla_efter_kok_left+0x1c0>
     b92:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     b9e:	38 9f       	mul	r19, r24
     ba0:	f0 01       	movw	r30, r0
     ba2:	39 9f       	mul	r19, r25
     ba4:	f0 0d       	add	r31, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	e9 5d       	subi	r30, 0xD9	; 217
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	e2 0f       	add	r30, r18
     bae:	f1 1d       	adc	r31, r1
     bb0:	90 81       	ld	r25, Z
     bb2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     bb6:	98 13       	cpse	r25, r24
     bb8:	c9 c1       	rjmp	.+914    	; 0xf4c <kolla_efter_kok_left+0x552>
     bba:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
		{
			if ((sens_safe[5] < 25) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20))
     bbe:	89 31       	cpi	r24, 0x19	; 25
     bc0:	50 f5       	brcc	.+84     	; 0xc16 <kolla_efter_kok_left+0x21c>
     bc2:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     bc6:	89 31       	cpi	r24, 0x19	; 25
     bc8:	30 f5       	brcc	.+76     	; 0xc16 <kolla_efter_kok_left+0x21c>
     bca:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     bce:	84 31       	cpi	r24, 0x14	; 20
     bd0:	10 f5       	brcc	.+68     	; 0xc16 <kolla_efter_kok_left+0x21c>
     bd2:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     bd6:	84 31       	cpi	r24, 0x14	; 20
     bd8:	f0 f4       	brcc	.+60     	; 0xc16 <kolla_efter_kok_left+0x21c>
     bda:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     bde:	84 31       	cpi	r24, 0x14	; 20
     be0:	d0 f4       	brcc	.+52     	; 0xc16 <kolla_efter_kok_left+0x21c>
     be2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			{
				matrix[bot_y + 1][bot_x] = wall; // köksö hittad
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     bee:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     bf2:	42 e3       	ldi	r20, 0x32	; 50
     bf4:	48 9f       	mul	r20, r24
     bf6:	f0 01       	movw	r30, r0
     bf8:	49 9f       	mul	r20, r25
     bfa:	f0 0d       	add	r31, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	e9 5d       	subi	r30, 0xD9	; 217
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	e3 0f       	add	r30, r19
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     c04:	f1 1d       	adc	r31, r1
     c06:	20 83       	st	Z, r18
     c08:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     c0a:	4c d2       	rcall	.+1176   	; 0x10a4 <UART0_Transmit>
     c0c:	5a dd       	rcall	.-1356   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	49 d2       	rcall	.+1170   	; 0x10a4 <UART0_Transmit>
     c12:	4b ce       	rjmp	.-874    	; 0x8aa <kokHittad>
				kokHittad();
     c14:	08 95       	ret
     c16:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
			}
			else if((sens_safe[5] > 25 ) && (sens_safe[3] > 25) && (sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y + 2][bot_x] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) )
     c1a:	8a 31       	cpi	r24, 0x1A	; 26
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <kolla_efter_kok_left+0x226>
     c1e:	96 c1       	rjmp	.+812    	; 0xf4c <kolla_efter_kok_left+0x552>
     c20:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     c24:	8a 31       	cpi	r24, 0x1A	; 26
     c26:	08 f4       	brcc	.+2      	; 0xc2a <kolla_efter_kok_left+0x230>
     c28:	91 c1       	rjmp	.+802    	; 0xf4c <kolla_efter_kok_left+0x552>
     c2a:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
     c2e:	86 34       	cpi	r24, 0x46	; 70
     c30:	08 f0       	brcs	.+2      	; 0xc34 <kolla_efter_kok_left+0x23a>
     c32:	8c c1       	rjmp	.+792    	; 0xf4c <kolla_efter_kok_left+0x552>
     c34:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     c38:	86 34       	cpi	r24, 0x46	; 70
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <kolla_efter_kok_left+0x244>
     c3c:	87 c1       	rjmp	.+782    	; 0xf4c <kolla_efter_kok_left+0x552>
     c3e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 96       	adiw	r24, 0x02	; 2
     c46:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     c4a:	32 e3       	ldi	r19, 0x32	; 50
     c4c:	38 9f       	mul	r19, r24
     c4e:	f0 01       	movw	r30, r0
     c50:	39 9f       	mul	r19, r25
     c52:	f0 0d       	add	r31, r0
     c54:	11 24       	eor	r1, r1
     c56:	e9 5d       	subi	r30, 0xD9	; 217
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	e2 0f       	add	r30, r18
     c5c:	f1 1d       	adc	r31, r1
     c5e:	90 81       	ld	r25, Z
     c60:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     c64:	98 13       	cpse	r25, r24
     c66:	72 c1       	rjmp	.+740    	; 0xf4c <kolla_efter_kok_left+0x552>
     c68:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     c6c:	84 31       	cpi	r24, 0x14	; 20
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <kolla_efter_kok_left+0x278>
     c70:	6d c1       	rjmp	.+730    	; 0xf4c <kolla_efter_kok_left+0x552>
     c72:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     c76:	84 31       	cpi	r24, 0x14	; 20
     c78:	08 f0       	brcs	.+2      	; 0xc7c <kolla_efter_kok_left+0x282>
     c7a:	68 c1       	rjmp	.+720    	; 0xf4c <kolla_efter_kok_left+0x552>
     c7c:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     c80:	84 31       	cpi	r24, 0x14	; 20
     c82:	08 f0       	brcs	.+2      	; 0xc86 <kolla_efter_kok_left+0x28c>
     c84:	63 c1       	rjmp	.+710    	; 0xf4c <kolla_efter_kok_left+0x552>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
			{
				KokFarFarAway = 1;
     c8a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     c8e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     c92:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
				matrix[bot_y + 2][bot_x] = wall; // köksö hittad
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 96       	adiw	r24, 0x02	; 2
     c9a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     c9e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     ca2:	42 e3       	ldi	r20, 0x32	; 50
     ca4:	48 9f       	mul	r20, r24
     ca6:	f0 01       	movw	r30, r0
     ca8:	49 9f       	mul	r20, r25
     caa:	f0 0d       	add	r31, r0
     cac:	11 24       	eor	r1, r1
     cae:	e9 5d       	subi	r30, 0xD9	; 217
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	e3 0f       	add	r30, r19
		//		driven = 0; // för att inte gå in i update igen inuti rot_left
				UART0_Transmit(stop);
     cb4:	f1 1d       	adc	r31, r1
     cb6:	20 83       	st	Z, r18
     cb8:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     cba:	f4 d1       	rcall	.+1000   	; 0x10a4 <UART0_Transmit>
     cbc:	02 dd       	rcall	.-1532   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	f1 d1       	rcall	.+994    	; 0x10a4 <UART0_Transmit>
     cc2:	f3 cd       	rjmp	.-1050   	; 0x8aa <kokHittad>
				kokHittad();
     cc4:	08 95       	ret
     cc6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			}
		}
		break;
		
		case 2:
		if (matrix[bot_y][bot_x + 1] == unknown || (matrix[bot_y][bot_x + 1] == drive))
     cca:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	92 e3       	ldi	r25, 0x32	; 50
     cd2:	89 9f       	mul	r24, r25
     cd4:	e0 0d       	add	r30, r0
     cd6:	f1 1d       	adc	r31, r1
     cd8:	11 24       	eor	r1, r1
     cda:	e8 5d       	subi	r30, 0xD8	; 216
     cdc:	fe 4f       	sbci	r31, 0xFE	; 254
     cde:	90 81       	ld	r25, Z
     ce0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     ce4:	98 17       	cp	r25, r24
     ce6:	89 f0       	breq	.+34     	; 0xd0a <kolla_efter_kok_left+0x310>
     ce8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     cec:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	22 e3       	ldi	r18, 0x32	; 50
     cf4:	82 9f       	mul	r24, r18
     cf6:	e0 0d       	add	r30, r0
     cf8:	f1 1d       	adc	r31, r1
     cfa:	11 24       	eor	r1, r1
     cfc:	e8 5d       	subi	r30, 0xD8	; 216
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	90 81       	ld	r25, Z
     d02:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     d06:	98 13       	cpse	r25, r24
     d08:	21 c1       	rjmp	.+578    	; 0xf4c <kolla_efter_kok_left+0x552>
     d0a:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
		{
			if ((sens_safe[5] < 25) && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20)) // ökat från 20
     d0e:	89 31       	cpi	r24, 0x19	; 25
     d10:	50 f5       	brcc	.+84     	; 0xd66 <kolla_efter_kok_left+0x36c>
     d12:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     d16:	89 31       	cpi	r24, 0x19	; 25
     d18:	30 f5       	brcc	.+76     	; 0xd66 <kolla_efter_kok_left+0x36c>
     d1a:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     d1e:	84 31       	cpi	r24, 0x14	; 20
     d20:	10 f5       	brcc	.+68     	; 0xd66 <kolla_efter_kok_left+0x36c>
     d22:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     d26:	84 31       	cpi	r24, 0x14	; 20
     d28:	f0 f4       	brcc	.+60     	; 0xd66 <kolla_efter_kok_left+0x36c>
     d2a:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     d2e:	84 31       	cpi	r24, 0x14	; 20
     d30:	d0 f4       	brcc	.+52     	; 0xd66 <kolla_efter_kok_left+0x36c>
     d32:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
			{
				
				matrix[bot_y][bot_x + 1] = wall; // köksö hittad
     d36:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     d40:	22 e3       	ldi	r18, 0x32	; 50
     d42:	92 9f       	mul	r25, r18
     d44:	e0 0d       	add	r30, r0
     d46:	f1 1d       	adc	r31, r1
     d48:	11 24       	eor	r1, r1
     d4a:	e8 5d       	subi	r30, 0xD8	; 216
				driven = 0; // för att inte gå in i update igen inuti rot_left
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 83       	st	Z, r24
     d50:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
				UART0_Transmit(stop);
     d54:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     d58:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     d5a:	a4 d1       	rcall	.+840    	; 0x10a4 <UART0_Transmit>
     d5c:	b2 dc       	rcall	.-1692   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	a1 d1       	rcall	.+834    	; 0x10a4 <UART0_Transmit>
     d62:	a3 cd       	rjmp	.-1210   	; 0x8aa <kokHittad>
				kokHittad();
     d64:	08 95       	ret
     d66:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
				
			}
			else if((sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y][bot_x + 2] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) ) // ökat från 60
     d6a:	86 34       	cpi	r24, 0x46	; 70
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <kolla_efter_kok_left+0x376>
     d6e:	ee c0       	rjmp	.+476    	; 0xf4c <kolla_efter_kok_left+0x552>
     d70:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     d74:	86 34       	cpi	r24, 0x46	; 70
     d76:	08 f0       	brcs	.+2      	; 0xd7a <kolla_efter_kok_left+0x380>
     d78:	e9 c0       	rjmp	.+466    	; 0xf4c <kolla_efter_kok_left+0x552>
     d7a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     d7e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	92 e3       	ldi	r25, 0x32	; 50
     d86:	89 9f       	mul	r24, r25
     d88:	e0 0d       	add	r30, r0
     d8a:	f1 1d       	adc	r31, r1
     d8c:	11 24       	eor	r1, r1
     d8e:	e7 5d       	subi	r30, 0xD7	; 215
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	90 81       	ld	r25, Z
     d94:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     d98:	98 13       	cpse	r25, r24
     d9a:	d8 c0       	rjmp	.+432    	; 0xf4c <kolla_efter_kok_left+0x552>
     d9c:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     da0:	84 31       	cpi	r24, 0x14	; 20
     da2:	08 f0       	brcs	.+2      	; 0xda6 <kolla_efter_kok_left+0x3ac>
     da4:	d3 c0       	rjmp	.+422    	; 0xf4c <kolla_efter_kok_left+0x552>
     da6:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     daa:	84 31       	cpi	r24, 0x14	; 20
     dac:	08 f0       	brcs	.+2      	; 0xdb0 <kolla_efter_kok_left+0x3b6>
     dae:	ce c0       	rjmp	.+412    	; 0xf4c <kolla_efter_kok_left+0x552>
     db0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     db4:	84 31       	cpi	r24, 0x14	; 20
     db6:	08 f0       	brcs	.+2      	; 0xdba <kolla_efter_kok_left+0x3c0>
     db8:	c9 c0       	rjmp	.+402    	; 0xf4c <kolla_efter_kok_left+0x552>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
			{
				KokFarFarAway = 1;
     dbe:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     dc2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
     dc6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <bot_y>
				matrix[bot_y][bot_x + 2] = wall; // köksö hittad
     dca:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <bot_x>
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wall>
     dd4:	22 e3       	ldi	r18, 0x32	; 50
     dd6:	92 9f       	mul	r25, r18
     dd8:	e0 0d       	add	r30, r0
     dda:	f1 1d       	adc	r31, r1
     ddc:	11 24       	eor	r1, r1
     dde:	e7 5d       	subi	r30, 0xD7	; 215
				driven = 0; // för att inte gå in i update igen inuti rot_left
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	80 83       	st	Z, r24
     de4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
				UART0_Transmit(stop);
     de8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     dec:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     dee:	5a d1       	rcall	.+692    	; 0x10a4 <UART0_Transmit>
     df0:	68 dc       	rcall	.-1840   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	57 d1       	rcall	.+686    	; 0x10a4 <UART0_Transmit>
     df6:	59 cd       	rjmp	.-1358   	; 0x8aa <kokHittad>
				kokHittad();
     df8:	08 95       	ret
     dfa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			}
		}
		break;
		
		case 3:
		if ((matrix[bot_y - 1][bot_x] == unknown) || (matrix[bot_y - 1][bot_x] == drive))
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     e06:	32 e3       	ldi	r19, 0x32	; 50
     e08:	38 9f       	mul	r19, r24
     e0a:	f0 01       	movw	r30, r0
     e0c:	39 9f       	mul	r19, r25
     e0e:	f0 0d       	add	r31, r0
     e10:	11 24       	eor	r1, r1
     e12:	e9 5d       	subi	r30, 0xD9	; 217
     e14:	fe 4f       	sbci	r31, 0xFE	; 254
     e16:	e2 0f       	add	r30, r18
     e18:	f1 1d       	adc	r31, r1
     e1a:	90 81       	ld	r25, Z
     e1c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     e20:	98 17       	cp	r25, r24
     e22:	a1 f0       	breq	.+40     	; 0xe4c <kolla_efter_kok_left+0x452>
     e24:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     e30:	38 9f       	mul	r19, r24
     e32:	f0 01       	movw	r30, r0
     e34:	39 9f       	mul	r19, r25
     e36:	f0 0d       	add	r31, r0
     e38:	11 24       	eor	r1, r1
     e3a:	e9 5d       	subi	r30, 0xD9	; 217
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	e2 0f       	add	r30, r18
     e40:	f1 1d       	adc	r31, r1
     e42:	90 81       	ld	r25, Z
     e44:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <drive>
     e48:	98 13       	cpse	r25, r24
     e4a:	80 c0       	rjmp	.+256    	; 0xf4c <kolla_efter_kok_left+0x552>
     e4c:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
		{
			if ((sens_safe[5] < 25 && (sens_safe[3] < 25) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20)))
     e50:	89 31       	cpi	r24, 0x19	; 25
     e52:	70 f5       	brcc	.+92     	; 0xeb0 <kolla_efter_kok_left+0x4b6>
     e54:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     e58:	89 31       	cpi	r24, 0x19	; 25
     e5a:	50 f5       	brcc	.+84     	; 0xeb0 <kolla_efter_kok_left+0x4b6>
     e5c:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     e60:	84 31       	cpi	r24, 0x14	; 20
     e62:	30 f5       	brcc	.+76     	; 0xeb0 <kolla_efter_kok_left+0x4b6>
     e64:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     e68:	84 31       	cpi	r24, 0x14	; 20
     e6a:	10 f5       	brcc	.+68     	; 0xeb0 <kolla_efter_kok_left+0x4b6>
     e6c:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     e70:	84 31       	cpi	r24, 0x14	; 20
     e72:	f0 f4       	brcc	.+60     	; 0xeb0 <kolla_efter_kok_left+0x4b6>
     e74:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
			{
				matrix[bot_y - 1][bot_x] = wall; // köksö hittad
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     e80:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     e84:	42 e3       	ldi	r20, 0x32	; 50
     e86:	48 9f       	mul	r20, r24
     e88:	f0 01       	movw	r30, r0
     e8a:	49 9f       	mul	r20, r25
     e8c:	f0 0d       	add	r31, r0
     e8e:	11 24       	eor	r1, r1
     e90:	e9 5d       	subi	r30, 0xD9	; 217
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	e3 0f       	add	r30, r19
				driven = 0; // för att inte gå in i update igen inuti rot_left
     e96:	f1 1d       	adc	r31, r1
     e98:	20 83       	st	Z, r18
     e9a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
				UART0_Transmit(stop);
     e9e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
				rot_left();
     ea4:	ff d0       	rcall	.+510    	; 0x10a4 <UART0_Transmit>
     ea6:	0d dc       	rcall	.-2022   	; 0x6c2 <rot_left>
				UART0_Transmit(stop);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	fc d0       	rcall	.+504    	; 0x10a4 <UART0_Transmit>
     eac:	fe cc       	rjmp	.-1540   	; 0x8aa <kokHittad>
				kokHittad();
     eae:	08 95       	ret
     eb0:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <sens_safe+0x5>
			}
			else if((sens_safe[5] < 70) && (sens_safe[3] < 70) && (matrix[bot_y - 2][bot_x] == unknown) && (sens_safe[0] < 20) && (sens_safe[1] < 20) && (sens_safe[4] < 20) )
     eb4:	86 34       	cpi	r24, 0x46	; 70
     eb6:	08 f0       	brcs	.+2      	; 0xeba <kolla_efter_kok_left+0x4c0>
     eb8:	49 c0       	rjmp	.+146    	; 0xf4c <kolla_efter_kok_left+0x552>
     eba:	80 91 21 06 	lds	r24, 0x0621	; 0x800621 <sens_safe+0x3>
     ebe:	86 34       	cpi	r24, 0x46	; 70
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <kolla_efter_kok_left+0x4ca>
     ec2:	44 c0       	rjmp	.+136    	; 0xf4c <kolla_efter_kok_left+0x552>
     ec4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 97       	sbiw	r24, 0x02	; 2
     ecc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <bot_x>
     ed0:	32 e3       	ldi	r19, 0x32	; 50
     ed2:	38 9f       	mul	r19, r24
     ed4:	f0 01       	movw	r30, r0
     ed6:	39 9f       	mul	r19, r25
     ed8:	f0 0d       	add	r31, r0
     eda:	11 24       	eor	r1, r1
     edc:	e9 5d       	subi	r30, 0xD9	; 217
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	e2 0f       	add	r30, r18
     ee2:	f1 1d       	adc	r31, r1
     ee4:	90 81       	ld	r25, Z
     ee6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <unknown>
     eea:	98 13       	cpse	r25, r24
     eec:	2f c0       	rjmp	.+94     	; 0xf4c <kolla_efter_kok_left+0x552>
     eee:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     ef2:	84 31       	cpi	r24, 0x14	; 20
     ef4:	58 f5       	brcc	.+86     	; 0xf4c <kolla_efter_kok_left+0x552>
     ef6:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     efa:	84 31       	cpi	r24, 0x14	; 20
     efc:	38 f5       	brcc	.+78     	; 0xf4c <kolla_efter_kok_left+0x552>
     efe:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     f02:	84 31       	cpi	r24, 0x14	; 20
     f04:	18 f5       	brcc	.+70     	; 0xf4c <kolla_efter_kok_left+0x552>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
			{
				KokFarFarAway = 1;
     f0a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
     f0e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				matrix[bot_y - 2][bot_x] = wall; // köksö hittad
     f12:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <bot_y>
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 97       	sbiw	r24, 0x02	; 2
     f1a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <bot_x>
     f1e:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <wall>
     f22:	42 e3       	ldi	r20, 0x32	; 50
     f24:	48 9f       	mul	r20, r24
     f26:	f0 01       	movw	r30, r0
     f28:	49 9f       	mul	r20, r25
     f2a:	f0 0d       	add	r31, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	e9 5d       	subi	r30, 0xD9	; 217
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	e3 0f       	add	r30, r19
     f34:	f1 1d       	adc	r31, r1
     f36:	20 83       	st	Z, r18
				driven = 0; // för att inte gå in i update igen inuti rot_left
     f38:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     f3c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
				UART0_Transmit(stop);
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	b0 d0       	rcall	.+352    	; 0x10a4 <UART0_Transmit>
     f44:	be db       	rcall	.-2180   	; 0x6c2 <rot_left>
				rot_left();
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	ad d0       	rcall	.+346    	; 0x10a4 <UART0_Transmit>
				UART0_Transmit(stop);
     f4a:	af cc       	rjmp	.-1698   	; 0x8aa <kokHittad>
     f4c:	08 95       	ret

00000f4e <navigation>:
     f4e:	d2 d9       	rcall	.-3164   	; 0x2f4 <baby_proof_and_update>
				kokHittad();
     f50:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
     f54:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
}
void navigation() // testa att bara svänga när väggar inte finns, ej 40cm
{
	baby_proof_and_update();
	
	if (ny_fram < (start_dist))
     f58:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <start_dist>
     f5c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <start_dist+0x1>
     f60:	28 17       	cp	r18, r24
     f62:	39 07       	cpc	r19, r25
     f64:	70 f4       	brcc	.+28     	; 0xf82 <navigation+0x34>
	{
		driven = (start_dist - ny_fram);
     f66:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <start_dist>
     f6a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <start_dist+0x1>
     f6e:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
     f72:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
     f76:	82 1b       	sub	r24, r18
     f78:	93 0b       	sbc	r25, r19
     f7a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <driven+0x1>
     f7e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <driven>
	}
	
	if (((driven) >= 36) && (harRot == 0)) // var 35 innan // funka nästan vid 37
     f82:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <driven>
     f86:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <driven+0x1>
     f8a:	84 97       	sbiw	r24, 0x24	; 36
     f8c:	88 f0       	brcs	.+34     	; 0xfb0 <navigation+0x62>
     f8e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
     f92:	81 11       	cpse	r24, r1
	{
	 	update_position();
     f94:	0d c0       	rjmp	.+26     	; 0xfb0 <navigation+0x62>
     f96:	ed da       	rcall	.-2598   	; 0x572 <update_position>
		start_dist = ny_fram; 
     f98:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ny_fram>
     f9c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ny_fram+0x1>
     fa0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <start_dist+0x1>
     fa4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <start_dist>
		driven = 0;
     fa8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <driven+0x1>
     fac:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <driven>
	
	}


	if ( (sens_safe[0] > 30) && (sens_safe[1] > 30) && (sens_safe[4] > 40) && (harRot == 0))
     fb0:	80 91 1e 06 	lds	r24, 0x061E	; 0x80061e <sens_safe>
     fb4:	8f 31       	cpi	r24, 0x1F	; 31
     fb6:	a0 f0       	brcs	.+40     	; 0xfe0 <navigation+0x92>
     fb8:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <sens_safe+0x1>
     fbc:	8f 31       	cpi	r24, 0x1F	; 31
     fbe:	80 f0       	brcs	.+32     	; 0xfe0 <navigation+0x92>
     fc0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     fc4:	89 32       	cpi	r24, 0x29	; 41
     fc6:	60 f0       	brcs	.+24     	; 0xfe0 <navigation+0x92>
     fc8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
     fcc:	81 11       	cpse	r24, r1
     fce:	08 c0       	rjmp	.+16     	; 0xfe0 <navigation+0x92>
     fd0:	8c ec       	ldi	r24, 0xCC	; 204
     fd2:	9c e1       	ldi	r25, 0x1C	; 28
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <navigation+0x86>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <navigation+0x8c>
	{
		_delay_ms(2);
		rot_right();
     fda:	00 00       	nop
     fdc:	3d db       	rcall	.-2438   	; 0x658 <rot_right>
     fde:	24 c0       	rjmp	.+72     	; 0x1028 <navigation+0xda>
	}

	else if ((sens_safe[4] < 40) && (ny_fram < stop_dist) && (sens_safe[2] < 30) &&  (harRot == 0)) // 18 13dec. 21 14 dec
     fe0:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <sens_safe+0x4>
     fe4:	88 32       	cpi	r24, 0x28	; 40
     fe6:	d8 f4       	brcc	.+54     	; 0x101e <navigation+0xd0>
     fe8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <ny_fram>
     fec:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <ny_fram+0x1>
     ff0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ff4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	80 f4       	brcc	.+32     	; 0x101e <navigation+0xd0>
     ffe:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <sens_safe+0x2>
    1002:	8e 31       	cpi	r24, 0x1E	; 30
    1004:	60 f4       	brcc	.+24     	; 0x101e <navigation+0xd0>
    1006:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    100a:	81 11       	cpse	r24, r1
	{
		rot_left();
    100c:	08 c0       	rjmp	.+16     	; 0x101e <navigation+0xd0>
    100e:	59 db       	rcall	.-2382   	; 0x6c2 <rot_left>
		stop_dist = 13;
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1018:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <navigation+0xda>
	}

	else if (harRot == 1) // ska köra fram om vi rotera förra gången
    101e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    1022:	81 30       	cpi	r24, 0x01	; 1
	{
		go_forward();
    1024:	09 f4       	brne	.+2      	; 0x1028 <navigation+0xda>
    1026:	49 d9       	rcall	.-3438   	; 0x2ba <go_forward>
	}
	
 	if ((state == 2) && (harRot == 0 ))
    1028:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <state>
    102c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <state+0x1>
    1030:	02 97       	sbiw	r24, 0x02	; 2
    1032:	29 f4       	brne	.+10     	; 0x103e <navigation+0xf0>
    1034:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <harRot>
    1038:	81 11       	cpse	r24, r1
	kolla_efter_kok_left();
    103a:	01 c0       	rjmp	.+2      	; 0x103e <navigation+0xf0>
    103c:	de cc       	rjmp	.-1604   	; 0x9fa <kolla_efter_kok_left>
    103e:	08 95       	ret

00001040 <main>:
}
	
int main(void)
{

Init();
    1040:	43 d8       	rcall	.-3962   	; 0xc8 <Init>

while(1)
    {
		if(recieve_renewed)
    1042:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <recieve_renewed>
    1046:	81 11       	cpse	r24, r1
			{
				 handle_incoming_data();
    1048:	9d d9       	rcall	.-3270   	; 0x384 <handle_incoming_data>
			}
			
		if(AUTO == 1 )
    104a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <AUTO>
    104e:	81 30       	cpi	r24, 0x01	; 1
		{
			navigation(); 
    1050:	09 f4       	brne	.+2      	; 0x1054 <main+0x14>
    1052:	7d df       	rcall	.-262    	; 0xf4e <navigation>
		}
		if(MANUELL == 1)
    1054:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <MANUELL>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	99 f7       	brne	.-26     	; 0x1042 <main+0x2>
		{ 
			UART0_Transmit(laptop_in);
    105c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <laptop_in>
    1060:	21 d0       	rcall	.+66     	; 0x10a4 <UART0_Transmit>
    1062:	ef cf       	rjmp	.-34     	; 0x1042 <main+0x2>

00001064 <UART1_Init>:
{
	
	while( !(UCSR1A & (1<<RXC1)) );

	return UDR1;
}
    1064:	88 e9       	ldi	r24, 0x98	; 152
    1066:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    106a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    106e:	87 e0       	ldi	r24, 0x07	; 7
    1070:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    107a:	08 95       	ret

0000107c <UART0_Init>:
    107c:	88 e9       	ldi	r24, 0x98	; 152
    107e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1082:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1086:	87 e1       	ldi	r24, 0x17	; 23
    1088:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    108c:	8e e0       	ldi	r24, 0x0E	; 14
    108e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1092:	08 95       	ret

00001094 <UART1_Transmit>:
    1094:	e8 ec       	ldi	r30, 0xC8	; 200
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	90 81       	ld	r25, Z
    109a:	95 ff       	sbrs	r25, 5
    109c:	fd cf       	rjmp	.-6      	; 0x1098 <UART1_Transmit+0x4>
    109e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    10a2:	08 95       	ret

000010a4 <UART0_Transmit>:

void UART0_Transmit(unsigned char data)
{
	
	while( !(UCSR0A & (1<<UDRE0)) );
    10a4:	e0 ec       	ldi	r30, 0xC0	; 192
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	90 81       	ld	r25, Z
    10aa:	95 ff       	sbrs	r25, 5
    10ac:	fd cf       	rjmp	.-6      	; 0x10a8 <UART0_Transmit+0x4>

	UDR0 = data;
    10ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10b2:	08 95       	ret

000010b4 <_exit>:
    10b4:	f8 94       	cli

000010b6 <__stop_program>:
    10b6:	ff cf       	rjmp	.-2      	; 0x10b6 <__stop_program>
